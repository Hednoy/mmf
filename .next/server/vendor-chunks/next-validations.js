"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/next-validations";
exports.ids = ["vendor-chunks/next-validations"];
exports.modules = {

/***/ "(rsc)/./node_modules/next-validations/dist/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/next-validations/dist/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   withValidation: () => (/* binding */ rr),\n/* harmony export */   withValidations: () => (/* binding */ it)\n/* harmony export */ });\nvar h = ((t)=> true ? __webpack_require__(\"(rsc)/./node_modules/next-validations/dist/esm sync recursive\") : 0)(function(t) {\n    if (true) return __webpack_require__(\"(rsc)/./node_modules/next-validations/dist/esm sync recursive\").apply(this, arguments);\n    throw Error('Dynamic require of \"' + t + '\" is not supported');\n});\nvar o = (t, e)=>()=>(e || t((e = {\n            exports: {}\n        }).exports, e), e.exports);\nvar _ = o((ct, A)=>{\n    \"use strict\";\n    function Ce(t) {\n        return typeof t != \"object\" || Array.isArray(t) || t == null ? !1 : Object.keys(t).length > 0;\n    }\n    function x(t, e, s = {}) {\n        for(let n in e)if (Ce(e[n])) t[n] = t[n] || {}, x(t[n], e[n], s);\n        else {\n            if (s.skipIfExist === !0 && t[n] !== void 0) continue;\n            t[n] = e[n];\n        }\n        return t;\n    }\n    A.exports = x;\n});\nvar I = o((pt, k)=>{\n    \"use strict\";\n    function Me(t) {\n        return t === void 0 || t === null ? \"\" : typeof t.toString == \"function\" ? t : typeof t;\n    }\n    k.exports = (t, e, s)=>t.replace(e, Me(s));\n});\nvar j = o((ft, w)=>{\n    \"use strict\";\n    w.exports = {\n        required: \"The '{field}' field is required.\",\n        string: \"The '{field}' field must be a string.\",\n        stringEmpty: \"The '{field}' field must not be empty.\",\n        stringMin: \"The '{field}' field length must be greater than or equal to {expected} characters long.\",\n        stringMax: \"The '{field}' field length must be less than or equal to {expected} characters long.\",\n        stringLength: \"The '{field}' field length must be {expected} characters long.\",\n        stringPattern: \"The '{field}' field fails to match the required pattern.\",\n        stringContains: \"The '{field}' field must contain the '{expected}' text.\",\n        stringEnum: \"The '{field}' field does not match any of the allowed values.\",\n        stringNumeric: \"The '{field}' field must be a numeric string.\",\n        stringAlpha: \"The '{field}' field must be an alphabetic string.\",\n        stringAlphanum: \"The '{field}' field must be an alphanumeric string.\",\n        stringAlphadash: \"The '{field}' field must be an alphadash string.\",\n        stringHex: \"The '{field}' field must be a hex string.\",\n        stringSingleLine: \"The '{field}' field must be a single line string.\",\n        stringBase64: \"The '{field}' field must be a base64 string.\",\n        number: \"The '{field}' field must be a number.\",\n        numberMin: \"The '{field}' field must be greater than or equal to {expected}.\",\n        numberMax: \"The '{field}' field must be less than or equal to {expected}.\",\n        numberEqual: \"The '{field}' field must be equal to {expected}.\",\n        numberNotEqual: \"The '{field}' field can't be equal to {expected}.\",\n        numberInteger: \"The '{field}' field must be an integer.\",\n        numberPositive: \"The '{field}' field must be a positive number.\",\n        numberNegative: \"The '{field}' field must be a negative number.\",\n        array: \"The '{field}' field must be an array.\",\n        arrayEmpty: \"The '{field}' field must not be an empty array.\",\n        arrayMin: \"The '{field}' field must contain at least {expected} items.\",\n        arrayMax: \"The '{field}' field must contain less than or equal to {expected} items.\",\n        arrayLength: \"The '{field}' field must contain {expected} items.\",\n        arrayContains: \"The '{field}' field must contain the '{expected}' item.\",\n        arrayUnique: \"The '{actual}' value in '{field}' field does not unique the '{expected}' values.\",\n        arrayEnum: \"The '{actual}' value in '{field}' field does not match any of the '{expected}' values.\",\n        tuple: \"The '{field}' field must be an array.\",\n        tupleEmpty: \"The '{field}' field must not be an empty array.\",\n        tupleLength: \"The '{field}' field must contain {expected} items.\",\n        boolean: \"The '{field}' field must be a boolean.\",\n        currency: \"The '{field}' must be a valid currency format\",\n        date: \"The '{field}' field must be a Date.\",\n        dateMin: \"The '{field}' field must be greater than or equal to {expected}.\",\n        dateMax: \"The '{field}' field must be less than or equal to {expected}.\",\n        enumValue: \"The '{field}' field value '{expected}' does not match any of the allowed values.\",\n        equalValue: \"The '{field}' field value must be equal to '{expected}'.\",\n        equalField: \"The '{field}' field value must be equal to '{expected}' field value.\",\n        forbidden: \"The '{field}' field is forbidden.\",\n        function: \"The '{field}' field must be a function.\",\n        email: \"The '{field}' field must be a valid e-mail.\",\n        emailEmpty: \"The '{field}' field must not be empty.\",\n        emailMin: \"The '{field}' field length must be greater than or equal to {expected} characters long.\",\n        emailMax: \"The '{field}' field length must be less than or equal to {expected} characters long.\",\n        luhn: \"The '{field}' field must be a valid checksum luhn.\",\n        mac: \"The '{field}' field must be a valid MAC address.\",\n        object: \"The '{field}' must be an Object.\",\n        objectStrict: \"The object '{field}' contains forbidden keys: '{actual}'.\",\n        objectMinProps: \"The object '{field}' must contain at least {expected} properties.\",\n        objectMaxProps: \"The object '{field}' must contain {expected} properties at most.\",\n        url: \"The '{field}' field must be a valid URL.\",\n        urlEmpty: \"The '{field}' field must not be empty.\",\n        uuid: \"The '{field}' field must be a valid UUID.\",\n        uuidVersion: \"The '{field}' field must be a valid UUID version provided.\",\n        classInstanceOf: \"The '{field}' field must be an instance of the '{expected}' class.\",\n        objectID: \"The '{field}' field must be an valid ObjectID\",\n        record: \"The '{field}' must be an Object.\"\n    };\n});\nvar S = o((yt, T)=>{\n    \"use strict\";\n    T.exports = function() {\n        let t = [];\n        return t.push(`\n\t\treturn value;\n\t`), {\n            source: t.join(`\n`)\n        };\n    };\n});\nvar N = o((dt, P)=>{\n    \"use strict\";\n    P.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [], a = !1;\n        if (t.convert === !0 && (a = !0, r.push(`\n\t\t\tif (!Array.isArray(value) && value != null) {\n\t\t\t\tvalue = [value];\n\t\t\t}\n\t\t`)), r.push(`\n\t\tif (!Array.isArray(value)) {\n\t\t\t${this.makeError({\n            type: \"array\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\n\t\tvar len = value.length;\n\t`), t.empty === !1 && r.push(`\n\t\t\tif (len === 0) {\n\t\t\t\t${this.makeError({\n            type: \"arrayEmpty\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.min != null && r.push(`\n\t\t\tif (len < ${t.min}) {\n\t\t\t\t${this.makeError({\n            type: \"arrayMin\",\n            expected: t.min,\n            actual: \"len\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.max != null && r.push(`\n\t\t\tif (len > ${t.max}) {\n\t\t\t\t${this.makeError({\n            type: \"arrayMax\",\n            expected: t.max,\n            actual: \"len\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.length != null && r.push(`\n\t\t\tif (len !== ${t.length}) {\n\t\t\t\t${this.makeError({\n            type: \"arrayLength\",\n            expected: t.length,\n            actual: \"len\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.contains != null && r.push(`\n\t\t\tif (value.indexOf(${JSON.stringify(t.contains)}) === -1) {\n\t\t\t\t${this.makeError({\n            type: \"arrayContains\",\n            expected: JSON.stringify(t.contains),\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.unique === !0 && r.push(`\n\t\t\tif(len > (new Set(value)).size) {\n\t\t\t\t${this.makeError({\n            type: \"arrayUnique\",\n            expected: \"Array.from(new Set(value.filter((item, index) => value.indexOf(item) !== index)))\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.enum != null) {\n            let u = JSON.stringify(t.enum);\n            r.push(`\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tif (${u}.indexOf(value[i]) === -1) {\n\t\t\t\t\t${this.makeError({\n                type: \"arrayEnum\",\n                expected: '\"' + t.enum.join(\", \") + '\"',\n                actual: \"value[i]\",\n                messages: e\n            })}\n\t\t\t\t}\n\t\t\t}\n\t\t`);\n        }\n        if (t.items != null) {\n            r.push(`\n\t\t\tvar arr = value;\n\t\t\tvar parentField = field;\n\t\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\t\tvalue = arr[i];\n\t\t`);\n            let u = s + \"[]\", i = this.getRuleFromSchema(t.items), l = `arr[i] = ${n.async ? \"await \" : \"\"}context.fn[%%INDEX%%](arr[i], (parentField ? parentField : \"\") + \"[\" + i + \"]\", parent, errors, context)`;\n            r.push(this.compileRule(i, n, u, l, \"arr[i]\")), r.push(`\n\t\t\t}\n\t\t`), r.push(`\n\t\treturn arr;\n\t`);\n        } else r.push(`\n\t\treturn value;\n\t`);\n        return {\n            sanitized: a,\n            source: r.join(`\n`)\n        };\n    };\n});\nvar R = o((ht, O)=>{\n    \"use strict\";\n    O.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [], a = !1;\n        return r.push(`\n\t\tvar origValue = value;\n\t`), t.convert === !0 && (a = !0, r.push(`\n\t\t\tif (typeof value !== \"boolean\") {\n\t\t\t\tif (\n\t\t\t\tvalue === 1\n\t\t\t\t|| value === \"true\"\n\t\t\t\t|| value === \"1\"\n\t\t\t\t|| value === \"on\"\n\t\t\t\t) {\n\t\t\t\t\tvalue = true;\n\t\t\t\t} else if (\n\t\t\t\tvalue === 0\n\t\t\t\t|| value === \"false\"\n\t\t\t\t|| value === \"0\"\n\t\t\t\t|| value === \"off\"\n\t\t\t\t) {\n\t\t\t\t\tvalue = false;\n\t\t\t\t}\n\t\t\t}\n\t\t`)), r.push(`\n\t\tif (typeof value !== \"boolean\") {\n\t\t\t${this.makeError({\n            type: \"boolean\",\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t}\n\t\t\n\t\treturn value;\n\t`), {\n            sanitized: a,\n            source: r.join(`\n`)\n        };\n    };\n});\nvar q = o((vt, F)=>{\n    \"use strict\";\n    F.exports = function({ schema: t, messages: e, index: s }, n, r) {\n        let a = [], u = t.instanceOf.name ? t.instanceOf.name : \"<UnknowClass>\";\n        return r.customs[s] ? r.customs[s].schema = t : r.customs[s] = {\n            schema: t\n        }, a.push(`\n\t\tif (!(value instanceof context.customs[${s}].schema.instanceOf))\n\t\t\t${this.makeError({\n            type: \"classInstanceOf\",\n            actual: \"value\",\n            expected: \"'\" + u + \"'\",\n            messages: e\n        })}\n\t`), a.push(`\n\t\treturn value;\n\t`), {\n            source: a.join(`\n`)\n        };\n    };\n});\nvar z = o((mt, V)=>{\n    \"use strict\";\n    V.exports = function({ schema: t, messages: e, index: s }, n, r) {\n        let a = [];\n        return a.push(`\n\t\t${this.makeCustomValidator({\n            fnName: \"check\",\n            path: n,\n            schema: t,\n            messages: e,\n            context: r,\n            ruleIndex: s\n        })}\n\t\treturn value;\n\t`), {\n            source: a.join(`\n`)\n        };\n    };\n});\nvar M = o((bt, C)=>{\n    \"use strict\";\n    var De = \"(?=.*\\\\d)^(-?~1|~1-?)(([0-9]\\\\d{0,2}(~2\\\\d{3})*)|0)?(\\\\~3\\\\d{1,2})?$\";\n    C.exports = function({ schema: t, messages: e }, s, n) {\n        let r = t.currencySymbol || null, a = t.thousandSeparator || \",\", u = t.decimalSeparator || \".\", i = t.customRegex, l = !t.symbolOptional, c = De.replace(/~1/g, r ? `\\\\${r}${l ? \"\" : \"?\"}` : \"\").replace(\"~2\", a).replace(\"~3\", u), p = [];\n        return p.push(`\n\t\tif (!value.match(${i || new RegExp(c)})) {\n\t\t\t${this.makeError({\n            type: \"currency\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\n\t\treturn value;\n\t`), {\n            source: p.join(`\n`)\n        };\n    };\n});\nvar L = o((gt, D)=>{\n    \"use strict\";\n    D.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [], a = !1;\n        return r.push(`\n\t\tvar origValue = value;\n\t`), t.convert === !0 && (a = !0, r.push(`\n\t\t\tif (!(value instanceof Date)) {\n\t\t\t\tvalue = new Date(value.length && !isNaN(+value) ? +value : value);\n\t\t\t}\n\t\t`)), r.push(`\n\t\tif (!(value instanceof Date) || isNaN(value.getTime()))\n\t\t\t${this.makeError({\n            type: \"date\",\n            actual: \"origValue\",\n            messages: e\n        })}\n\n\t\treturn value;\n\t`), {\n            sanitized: a,\n            source: r.join(`\n`)\n        };\n    };\n});\nvar H = o((Et, U)=>{\n    \"use strict\";\n    var Le = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/, Ue = /^\\S+@\\S+\\.\\S+$/;\n    U.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [], a = t.mode == \"precise\" ? Le : Ue, u = !1;\n        return r.push(`\n\t\tif (typeof value !== \"string\") {\n\t\t\t${this.makeError({\n            type: \"string\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\t`), t.empty ? r.push(`\n\t\t\tif (value.length === 0) return value;\n\t\t`) : r.push(`\n\t\t\tif (value.length === 0) {\n\t\t\t\t${this.makeError({\n            type: \"emailEmpty\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t`), t.normalize && (u = !0, r.push(`\n\t\t\tvalue = value.trim().toLowerCase();\n\t\t`)), t.min != null && r.push(`\n\t\t\tif (value.length < ${t.min}) {\n\t\t\t\t${this.makeError({\n            type: \"emailMin\",\n            expected: t.min,\n            actual: \"value.length\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.max != null && r.push(`\n\t\t\tif (value.length > ${t.max}) {\n\t\t\t\t${this.makeError({\n            type: \"emailMax\",\n            expected: t.max,\n            actual: \"value.length\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), r.push(`\n\t\tif (!${a.toString()}.test(value)) {\n\t\t\t${this.makeError({\n            type: \"email\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t}\n\n\t\treturn value;\n\t`), {\n            sanitized: u,\n            source: r.join(`\n`)\n        };\n    };\n});\nvar Z = o(($t, J)=>{\n    \"use strict\";\n    J.exports = function({ schema: t, messages: e }, s, n) {\n        return {\n            source: `\n\t\t\tif (${JSON.stringify(t.values || [])}.indexOf(value) === -1)\n\t\t\t\t${this.makeError({\n                type: \"enumValue\",\n                expected: '\"' + t.values.join(\", \") + '\"',\n                actual: \"value\",\n                messages: e\n            })}\n\t\t\t\n\t\t\treturn value;\n\t\t`\n        };\n    };\n});\nvar B = o((xt, X)=>{\n    \"use strict\";\n    X.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [];\n        return t.field ? (t.strict ? r.push(`\n\t\t\t\tif (value !== parent[\"${t.field}\"])\n\t\t\t`) : r.push(`\n\t\t\t\tif (value != parent[\"${t.field}\"])\n\t\t\t`), r.push(`\n\t\t\t\t${this.makeError({\n            type: \"equalField\",\n            actual: \"value\",\n            expected: JSON.stringify(t.field),\n            messages: e\n        })}\n\t\t`)) : (t.strict ? r.push(`\n\t\t\t\tif (value !== ${JSON.stringify(t.value)})\n\t\t\t`) : r.push(`\n\t\t\t\tif (value != ${JSON.stringify(t.value)})\n\t\t\t`), r.push(`\n\t\t\t\t${this.makeError({\n            type: \"equalValue\",\n            actual: \"value\",\n            expected: JSON.stringify(t.value),\n            messages: e\n        })}\n\t\t`)), r.push(`\n\t\treturn value;\n\t`), {\n            source: r.join(`\n`)\n        };\n    };\n});\nvar W = o((At, K)=>{\n    \"use strict\";\n    K.exports = function({ schema: e, messages: s }, n, r) {\n        let a = [];\n        return a.push(`\n\t\tif (value !== null && value !== undefined) {\n\t`), e.remove ? a.push(`\n\t\t\treturn undefined;\n\t\t`) : a.push(`\n\t\t\t${this.makeError({\n            type: \"forbidden\",\n            actual: \"value\",\n            messages: s\n        })}\n\t\t`), a.push(`\n\t\t}\n\n\t\treturn value;\n\t`), {\n            source: a.join(`\n`)\n        };\n    };\n});\nvar Q = o((_t, Y)=>{\n    \"use strict\";\n    Y.exports = function({ schema: t, messages: e }, s, n) {\n        return {\n            source: `\n\t\t\tif (typeof value !== \"function\")\n\t\t\t\t${this.makeError({\n                type: \"function\",\n                actual: \"value\",\n                messages: e\n            })}\n\n\t\t\treturn value;\n\t\t`\n        };\n    };\n});\nvar ee = o((kt, G)=>{\n    \"use strict\";\n    G.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [];\n        r.push(`\n\t\tvar hasValid = false;\n\t\tvar newVal = value;\n\t\tvar checkErrors = [];\n\t\tvar errorsSize = errors.length;\n\t`);\n        for(let a = 0; a < t.rules.length; a++){\n            r.push(`\n\t\t\tif (!hasValid) {\n\t\t\t\tvar _errors = [];\n\t\t`);\n            let u = this.getRuleFromSchema(t.rules[a]);\n            r.push(this.compileRule(u, n, s, `var tmpVal = ${n.async ? \"await \" : \"\"}context.fn[%%INDEX%%](value, field, parent, _errors, context);`, \"tmpVal\")), r.push(`\n\t\t\t\tif (errors.length == errorsSize && _errors.length == 0) {\n\t\t\t\t\thasValid = true;\n\t\t\t\t\tnewVal = tmpVal;\n\t\t\t\t} else {\n\t\t\t\t\tArray.prototype.push.apply(checkErrors, [].concat(_errors, errors.splice(errorsSize)));\n\t\t\t\t}\n\t\t\t}\n\t\t`);\n        }\n        return r.push(`\n\t\tif (!hasValid) {\n\t\t\tArray.prototype.push.apply(errors, checkErrors);\n\t\t}\n\n\t\treturn newVal;\n\t`), {\n            source: r.join(`\n`)\n        };\n    };\n});\nvar re = o((It, te)=>{\n    \"use strict\";\n    te.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [];\n        r.push(`\n\t\tvar origValue = value;\n\t`);\n        let a = !1;\n        return t.convert === !0 && (a = !0, r.push(`\n\t\t\tif (typeof value !== \"number\") {\n\t\t\t\tvalue = Number(value);\n\t\t\t}\n\t\t`)), r.push(`\n\t\tif (typeof value !== \"number\" || isNaN(value) || !isFinite(value)) {\n\t\t\t${this.makeError({\n            type: \"number\",\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\t`), t.min != null && r.push(`\n\t\t\tif (value < ${t.min}) {\n\t\t\t\t${this.makeError({\n            type: \"numberMin\",\n            expected: t.min,\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.max != null && r.push(`\n\t\t\tif (value > ${t.max}) {\n\t\t\t\t${this.makeError({\n            type: \"numberMax\",\n            expected: t.max,\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.equal != null && r.push(`\n\t\t\tif (value !== ${t.equal}) {\n\t\t\t\t${this.makeError({\n            type: \"numberEqual\",\n            expected: t.equal,\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.notEqual != null && r.push(`\n\t\t\tif (value === ${t.notEqual}) {\n\t\t\t\t${this.makeError({\n            type: \"numberNotEqual\",\n            expected: t.notEqual,\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.integer === !0 && r.push(`\n\t\t\tif (value % 1 !== 0) {\n\t\t\t\t${this.makeError({\n            type: \"numberInteger\",\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.positive === !0 && r.push(`\n\t\t\tif (value <= 0) {\n\t\t\t\t${this.makeError({\n            type: \"numberPositive\",\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.negative === !0 && r.push(`\n\t\t\tif (value >= 0) {\n\t\t\t\t${this.makeError({\n            type: \"numberNegative\",\n            actual: \"origValue\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), r.push(`\n\t\treturn value;\n\t`), {\n            sanitized: a,\n            source: r.join(`\n`)\n        };\n    };\n});\nvar ae = o((wt, se)=>{\n    \"use strict\";\n    var He = /^[_$a-zA-Z][_$a-zA-Z0-9]*$/, Je = /[\"'\\\\\\n\\r\\u2028\\u2029]/g;\n    function v(t) {\n        return t.replace(Je, function(e) {\n            switch(e){\n                case '\"':\n                case \"'\":\n                case \"\\\\\":\n                    return \"\\\\\" + e;\n                case `\n`:\n                    return \"\\\\n\";\n                case \"\\r\":\n                    return \"\\\\r\";\n                case \"\\u2028\":\n                    return \"\\\\u2028\";\n                case \"\\u2029\":\n                    return \"\\\\u2029\";\n            }\n        });\n    }\n    se.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [];\n        r.push(`\n\t\tif (typeof value !== \"object\" || value === null || Array.isArray(value)) {\n\t\t\t${this.makeError({\n            type: \"object\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\t`);\n        let a = t.properties || t.props;\n        if (a) {\n            r.push(\"var parentObj = value;\"), r.push(\"var parentField = field;\");\n            let u = Object.keys(a);\n            for(let i = 0; i < u.length; i++){\n                let l = u[i], c = v(l), p = He.test(c) ? `.${c}` : `['${c}']`, f = `parentObj${p}`, E = (s ? s + \".\" : \"\") + l, $ = a[l].label, qe = $ ? `'${v($)}'` : void 0;\n                r.push(`\n// Field: ${v(E)}`), r.push(`field = parentField ? parentField + \"${p}\" : \"${c}\";`), r.push(`value = ${f};`), r.push(`label = ${qe}`);\n                let Ve = this.getRuleFromSchema(a[l]), ze = `\n\t\t\t\t${f} = ${n.async ? \"await \" : \"\"}context.fn[%%INDEX%%](value, field, parentObj, errors, context, label);\n\t\t\t`;\n                r.push(this.compileRule(Ve, n, E, ze, f)), this.opts.haltOnFirstError === !0 && r.push(\"if (errors.length) return parentObj;\");\n            }\n            if (t.strict) {\n                let i = Object.keys(a);\n                r.push(`\n\t\t\t\tfield = parentField;\n\t\t\t\tvar invalidProps = [];\n\t\t\t\tvar props = Object.keys(parentObj);\n\n\t\t\t\tfor (let i = 0; i < props.length; i++) {\n\t\t\t\t\tif (${JSON.stringify(i)}.indexOf(props[i]) === -1) {\n\t\t\t\t\t\tinvalidProps.push(props[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (invalidProps.length) {\n\t\t\t`), t.strict === \"remove\" ? (r.push(`\n\t\t\t\t\tif (errors.length === 0) {\n\t\t\t\t`), r.push(`\n\t\t\t\t\t\tinvalidProps.forEach(function(field) {\n\t\t\t\t\t\t\tdelete parentObj[field];\n\t\t\t\t\t\t});\n\t\t\t\t`), r.push(`\n\t\t\t\t\t}\n\t\t\t\t`)) : r.push(`\n\t\t\t\t\t${this.makeError({\n                    type: \"objectStrict\",\n                    expected: '\"' + i.join(\", \") + '\"',\n                    actual: \"invalidProps.join(', ')\",\n                    messages: e\n                })}\n\t\t\t\t`), r.push(`\n\t\t\t\t}\n\t\t\t`);\n            }\n        }\n        return (t.minProps != null || t.maxProps != null) && (t.strict ? r.push(`\n\t\t\t\tprops = Object.keys(${a ? \"parentObj\" : \"value\"});\n\t\t\t`) : r.push(`\n\t\t\t\tvar props = Object.keys(${a ? \"parentObj\" : \"value\"});\n\t\t\t\t${a ? \"field = parentField;\" : \"\"}\n\t\t\t`)), t.minProps != null && r.push(`\n\t\t\tif (props.length < ${t.minProps}) {\n\t\t\t\t${this.makeError({\n            type: \"objectMinProps\",\n            expected: t.minProps,\n            actual: \"props.length\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), t.maxProps != null && r.push(`\n\t\t\tif (props.length > ${t.maxProps}) {\n\t\t\t\t${this.makeError({\n            type: \"objectMaxProps\",\n            expected: t.maxProps,\n            actual: \"props.length\",\n            messages: e\n        })}\n\t\t\t}\n\t\t`), a ? r.push(`\n\t\t\treturn parentObj;\n\t\t`) : r.push(`\n\t\t\treturn value;\n\t\t`), {\n            source: r.join(`\n`)\n        };\n    };\n});\nvar ue = o((jt, ne)=>{\n    \"use strict\";\n    ne.exports = function({ schema: t, messages: e, index: s }, n, r) {\n        let a = [];\n        return r.customs[s] ? r.customs[s].schema = t : r.customs[s] = {\n            schema: t\n        }, a.push(`\n\t\tconst ObjectID = context.customs[${s}].schema.ObjectID;\n\t\tif (!ObjectID.isValid(value)) {\n\t\t\t${this.makeError({\n            type: \"objectID\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn;\n\t\t}\n\t`), t.convert === !0 ? a.push(\"return new ObjectID(value)\") : t.convert === \"hexString\" ? a.push(\"return value.toString()\") : a.push(\"return value\"), {\n            source: a.join(`\n`)\n        };\n    };\n});\nvar ie = o((Tt, le)=>{\n    \"use strict\";\n    function Ze(t) {\n        for(let e in t.messages)e.startsWith(\"string\") && (t.messages[e] = t.messages[e].replace(\" field \", \" key \"));\n    }\n    le.exports = function({ schema: e, messages: s }, n, r) {\n        let a = [];\n        a.push(`\n\t\tif (typeof value !== \"object\" || value === null || Array.isArray(value)) {\n\t\t\t${this.makeError({\n            type: \"record\",\n            actual: \"value\",\n            messages: s\n        })}\n\t\t\treturn value;\n\t\t}\n\t`);\n        let u = e.key || \"string\", i = e.value || \"any\";\n        a.push(`\n\t\tconst record = value;\n\t\tlet sanitizedKey, sanitizedValue;\n\t\tconst result = {};\n\t\tfor (let key in value) {\n\t`), a.push(\"sanitizedKey = value = key;\");\n        let l = this.getRuleFromSchema(u);\n        Ze(l);\n        let c = `\n\t\tsanitizedKey = ${r.async ? \"await \" : \"\"}context.fn[%%INDEX%%](key, field ? field + \".\" + key : key, record, errors, context);\n\t`;\n        a.push(this.compileRule(l, r, null, c, \"sanitizedKey\")), a.push(\"sanitizedValue = value = record[key];\");\n        let p = this.getRuleFromSchema(i), f = `\n\t\tsanitizedValue = ${r.async ? \"await \" : \"\"}context.fn[%%INDEX%%](value, field ? field + \".\" + key : key, record, errors, context);\n\t`;\n        return a.push(this.compileRule(p, r, `${n}[key]`, f, \"sanitizedValue\")), a.push(\"result[sanitizedKey] = sanitizedValue;\"), a.push(`\n\t\t}\n\t`), a.push(\"return result;\"), {\n            source: a.join(`\n`)\n        };\n    };\n});\nvar ce = o((St, oe)=>{\n    \"use strict\";\n    var Xe = /^-?[0-9]\\d*(\\.\\d+)?$/, Be = /^[a-zA-Z]+$/, Ke = /^[a-zA-Z0-9]+$/, We = /^[a-zA-Z0-9_-]+$/, Ye = /^[0-9a-fA-F]+$/, Qe = /^(?:[A-Za-z0-9+\\\\/]{4})*(?:[A-Za-z0-9+\\\\/]{2}==|[A-Za-z0-9+/]{3}=)?$/;\n    oe.exports = function({ schema: e, messages: s }, n, r) {\n        let a = [], u = !1;\n        if (e.convert === !0 && (u = !0, a.push(`\n\t\t\tif (typeof value !== \"string\") {\n\t\t\t\tvalue = String(value);\n\t\t\t}\n\t\t`)), a.push(`\n\t\tif (typeof value !== \"string\") {\n\t\t\t${this.makeError({\n            type: \"string\",\n            actual: \"value\",\n            messages: s\n        })}\n\t\t\treturn value;\n\t\t}\n\n\t\tvar origValue = value;\n\t`), e.trim && (u = !0, a.push(`\n\t\t\tvalue = value.trim();\n\t\t`)), e.trimLeft && (u = !0, a.push(`\n\t\t\tvalue = value.trimLeft();\n\t\t`)), e.trimRight && (u = !0, a.push(`\n\t\t\tvalue = value.trimRight();\n\t\t`)), e.padStart) {\n            u = !0;\n            let i = e.padChar != null ? e.padChar : \" \";\n            a.push(`\n\t\t\tvalue = value.padStart(${e.padStart}, ${JSON.stringify(i)});\n\t\t`);\n        }\n        if (e.padEnd) {\n            u = !0;\n            let i = e.padChar != null ? e.padChar : \" \";\n            a.push(`\n\t\t\tvalue = value.padEnd(${e.padEnd}, ${JSON.stringify(i)});\n\t\t`);\n        }\n        if (e.lowercase && (u = !0, a.push(`\n\t\t\tvalue = value.toLowerCase();\n\t\t`)), e.uppercase && (u = !0, a.push(`\n\t\t\tvalue = value.toUpperCase();\n\t\t`)), e.localeLowercase && (u = !0, a.push(`\n\t\t\tvalue = value.toLocaleLowerCase();\n\t\t`)), e.localeUppercase && (u = !0, a.push(`\n\t\t\tvalue = value.toLocaleUpperCase();\n\t\t`)), a.push(`\n\t\t\tvar len = value.length;\n\t`), e.empty === !1 ? a.push(`\n\t\t\tif (len === 0) {\n\t\t\t\t${this.makeError({\n            type: \"stringEmpty\",\n            actual: \"value\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`) : e.empty === !0 && a.push(`\n\t\t\tif (len === 0) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t`), e.min != null && a.push(`\n\t\t\tif (len < ${e.min}) {\n\t\t\t\t${this.makeError({\n            type: \"stringMin\",\n            expected: e.min,\n            actual: \"len\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.max != null && a.push(`\n\t\t\tif (len > ${e.max}) {\n\t\t\t\t${this.makeError({\n            type: \"stringMax\",\n            expected: e.max,\n            actual: \"len\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.length != null && a.push(`\n\t\t\tif (len !== ${e.length}) {\n\t\t\t\t${this.makeError({\n            type: \"stringLength\",\n            expected: e.length,\n            actual: \"len\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.pattern != null) {\n            let i = e.pattern;\n            typeof e.pattern == \"string\" && (i = new RegExp(e.pattern, e.patternFlags)), a.push(`\n\t\t\tif (!${i.toString()}.test(value)) {\n\t\t\t\t${this.makeError({\n                type: \"stringPattern\",\n                expected: `\"${i.toString().replace(/\"/g, \"\\\\$&\")}\"`,\n                actual: \"origValue\",\n                messages: s\n            })}\n\t\t\t}\n\t\t`);\n        }\n        if (e.contains != null && a.push(`\n\t\t\tif (value.indexOf(\"${e.contains}\") === -1) {\n\t\t\t\t${this.makeError({\n            type: \"stringContains\",\n            expected: '\"' + e.contains + '\"',\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.enum != null) {\n            let i = JSON.stringify(e.enum);\n            a.push(`\n\t\t\tif (${i}.indexOf(value) === -1) {\n\t\t\t\t${this.makeError({\n                type: \"stringEnum\",\n                expected: '\"' + e.enum.join(\", \") + '\"',\n                actual: \"origValue\",\n                messages: s\n            })}\n\t\t\t}\n\t\t`);\n        }\n        return e.numeric === !0 && a.push(`\n\t\t\tif (!${Xe.toString()}.test(value) ) {\n\t\t\t\t${this.makeError({\n            type: \"stringNumeric\",\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.alpha === !0 && a.push(`\n\t\t\tif(!${Be.toString()}.test(value)) {\n\t\t\t\t${this.makeError({\n            type: \"stringAlpha\",\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.alphanum === !0 && a.push(`\n\t\t\tif(!${Ke.toString()}.test(value)) {\n\t\t\t\t${this.makeError({\n            type: \"stringAlphanum\",\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.alphadash === !0 && a.push(`\n\t\t\tif(!${We.toString()}.test(value)) {\n\t\t\t\t${this.makeError({\n            type: \"stringAlphadash\",\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.hex === !0 && a.push(`\n\t\t\tif(value.length % 2 !== 0 || !${Ye.toString()}.test(value)) {\n\t\t\t\t${this.makeError({\n            type: \"stringHex\",\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.singleLine === !0 && a.push(`\n\t\t\tif(value.includes(\"\\\\n\")) {\n\t\t\t\t${this.makeError({\n            type: \"stringSingleLine\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), e.base64 === !0 && a.push(`\n\t\t\tif(!${Qe.toString()}.test(value)) {\n\t\t\t\t${this.makeError({\n            type: \"stringBase64\",\n            actual: \"origValue\",\n            messages: s\n        })}\n\t\t\t}\n\t\t`), a.push(`\n\t\treturn value;\n\t`), {\n            sanitized: u,\n            source: a.join(`\n`)\n        };\n    };\n});\nvar fe = o((Pt, pe)=>{\n    \"use strict\";\n    pe.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [];\n        if (t.items != null) {\n            if (!Array.isArray(t.items)) throw new Error(`Invalid '${t.type}' schema. The 'items' field must be an array.`);\n            if (t.items.length === 0) throw new Error(`Invalid '${t.type}' schema. The 'items' field must not be an empty array.`);\n        }\n        if (r.push(`\n\t\tif (!Array.isArray(value)) {\n\t\t\t${this.makeError({\n            type: \"tuple\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\n\t\tvar len = value.length;\n\t`), t.empty === !1 && r.push(`\n\t\t\tif (len === 0) {\n\t\t\t\t${this.makeError({\n            type: \"tupleEmpty\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t`), t.items != null) {\n            r.push(`\n\t\t\tif (${t.empty} !== false && len === 0) {\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (len !== ${t.items.length}) {\n\t\t\t\t${this.makeError({\n                type: \"tupleLength\",\n                expected: t.items.length,\n                actual: \"len\",\n                messages: e\n            })}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t`), r.push(`\n\t\t\tvar arr = value;\n\t\t\tvar parentField = field;\n\t\t`);\n            for(let a = 0; a < t.items.length; a++){\n                r.push(`\n\t\t\tvalue = arr[${a}];\n\t\t`);\n                let u = `${s}[${a}]`, i = this.getRuleFromSchema(t.items[a]), l = `\n\t\t\tarr[${a}] = ${n.async ? \"await \" : \"\"}context.fn[%%INDEX%%](arr[${a}], (parentField ? parentField : \"\") + \"[\" + ${a} + \"]\", parent, errors, context);\n\t\t`;\n                r.push(this.compileRule(i, n, u, l, `arr[${a}]`));\n            }\n            r.push(`\n\t\treturn arr;\n\t`);\n        } else r.push(`\n\t\treturn value;\n\t`);\n        return {\n            source: r.join(`\n`)\n        };\n    };\n});\nvar de = o((Nt, ye)=>{\n    \"use strict\";\n    var Ge = /^https?:\\/\\/\\S+/;\n    ye.exports = function({ schema: t, messages: e }, s, n) {\n        let r = [];\n        return r.push(`\n\t\tif (typeof value !== \"string\") {\n\t\t\t${this.makeError({\n            type: \"string\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\t`), t.empty ? r.push(`\n\t\t\tif (value.length === 0) return value;\n\t\t`) : r.push(`\n\t\t\tif (value.length === 0) {\n\t\t\t\t${this.makeError({\n            type: \"urlEmpty\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t`), r.push(`\n\t\tif (!${Ge.toString()}.test(value)) {\n\t\t\t${this.makeError({\n            type: \"url\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t}\n\n\t\treturn value;\n\t`), {\n            source: r.join(`\n`)\n        };\n    };\n});\nvar ve = o((Ot, he)=>{\n    \"use strict\";\n    var et = /^([0-9a-f]{8}-[0-9a-f]{4}-[1-6][0-9a-f]{3}-[0-9a-f]{4}-[0-9a-f]{12}|[0]{8}-[0]{4}-[0]{4}-[0]{4}-[0]{12})$/i;\n    he.exports = function({ schema: t, messages: e }, s) {\n        let n = [];\n        return n.push(`\n\t\tif (typeof value !== \"string\") {\n\t\t\t${this.makeError({\n            type: \"string\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\n\t\tvar val = value.toLowerCase();\n\t\tif (!${et.toString()}.test(val)) {\n\t\t\t${this.makeError({\n            type: \"uuid\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\treturn value;\n\t\t}\n\n\t\tconst version = val.charAt(14) | 0;\n\t`), parseInt(t.version) < 7 && n.push(`\n\t\t\tif (${t.version} !== version) {\n\t\t\t\t${this.makeError({\n            type: \"uuidVersion\",\n            expected: t.version,\n            actual: \"version\",\n            messages: e\n        })}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t`), n.push(`\n\t\tswitch (version) {\n\t\tcase 0:\n\t\tcase 1:\n\t\tcase 2:\n\t\tcase 6:\n\t\t\tbreak;\n\t\tcase 3:\n\t\tcase 4:\n\t\tcase 5:\n\t\t\tif ([\"8\", \"9\", \"a\", \"b\"].indexOf(val.charAt(19)) === -1) {\n\t\t\t\t${this.makeError({\n            type: \"uuid\",\n            actual: \"value\",\n            messages: e\n        })}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t`), {\n            source: n.join(`\n`)\n        };\n    };\n});\nvar be = o((Rt, me)=>{\n    \"use strict\";\n    var tt = /^((([a-f0-9][a-f0-9]+[-]){5}|([a-f0-9][a-f0-9]+[:]){5})([a-f0-9][a-f0-9])$)|(^([a-f0-9][a-f0-9][a-f0-9][a-f0-9]+[.]){2}([a-f0-9][a-f0-9][a-f0-9][a-f0-9]))$/i;\n    me.exports = function({ schema: t, messages: e }, s, n) {\n        return {\n            source: `\n\t\t\tif (typeof value !== \"string\") {\n\t\t\t\t${this.makeError({\n                type: \"string\",\n                actual: \"value\",\n                messages: e\n            })}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tvar v = value.toLowerCase();\n\t\t\tif (!${tt.toString()}.test(v)) {\n\t\t\t\t${this.makeError({\n                type: \"mac\",\n                actual: \"value\",\n                messages: e\n            })}\n\t\t\t}\n\t\t\t\n\t\t\treturn value;\n\t\t`\n        };\n    };\n});\nvar Ee = o((Ft, ge)=>{\n    \"use strict\";\n    ge.exports = function({ schema: t, messages: e }, s, n) {\n        return {\n            source: `\n\t\t\tif (typeof value !== \"string\") {\n\t\t\t\t${this.makeError({\n                type: \"string\",\n                actual: \"value\",\n                messages: e\n            })}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t\tif (typeof value !== \"string\")\n\t\t\t\tvalue = String(value);\n\n\t\t\tval = value.replace(/\\\\D+/g, \"\");\n\n\t\t\tvar array = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];\n\t\t\tvar len = val ? val.length : 0,\n\t\t\t\tbit = 1,\n\t\t\t\tsum = 0;\n\t\t\twhile (len--) {\n\t\t\t\tsum += !(bit ^= 1) ? parseInt(val[len], 10) : array[val[len]];\n\t\t\t}\n\n\t\t\tif (!(sum % 10 === 0 && sum > 0)) {\n\t\t\t\t${this.makeError({\n                type: \"luhn\",\n                actual: \"value\",\n                messages: e\n            })}\n\t\t\t}\n\n\t\t\treturn value;\n\t\t`\n        };\n    };\n});\nvar _e = o((qt, Ae)=>{\n    \"use strict\";\n    var m, $e, b, xe, rt = \"prettier\", st = \"cli-highlight\";\n    Ae.exports = function(t) {\n        m || (m = h(rt), $e = {\n            parser: \"babel\",\n            useTabs: !1,\n            printWidth: 120,\n            trailingComma: \"none\",\n            tabWidth: 4,\n            singleQuote: !1,\n            semi: !0,\n            bracketSpacing: !0\n        }, b = h(st), xe = {\n            language: \"js\",\n            theme: b.fromJson({\n                keyword: [\n                    \"white\",\n                    \"bold\"\n                ],\n                built_in: \"magenta\",\n                literal: \"cyan\",\n                number: \"magenta\",\n                regexp: \"red\",\n                string: [\n                    \"yellow\",\n                    \"bold\"\n                ],\n                symbol: \"plain\",\n                class: \"blue\",\n                attr: \"plain\",\n                function: [\n                    \"white\",\n                    \"bold\"\n                ],\n                title: \"plain\",\n                params: \"green\",\n                comment: \"grey\"\n            })\n        });\n        let e = m.format(t, $e);\n        return b.highlight(e, xe);\n    };\n});\nvar Ie = o((zt, ke)=>{\n    \"use strict\";\n    var d;\n    try {\n        d = new Function(\"return Object.getPrototypeOf(async function(){}).constructor\")();\n    } catch  {}\n    var y = _(), at = I();\n    function nt() {\n        return Object.assign({}, j());\n    }\n    function ut() {\n        return {\n            any: S(),\n            array: N(),\n            boolean: R(),\n            class: q(),\n            custom: z(),\n            currency: M(),\n            date: L(),\n            email: H(),\n            enum: Z(),\n            equal: B(),\n            forbidden: W(),\n            function: Q(),\n            multi: ee(),\n            number: re(),\n            object: ae(),\n            objectID: ue(),\n            record: ie(),\n            string: ce(),\n            tuple: fe(),\n            url: de(),\n            uuid: ve(),\n            mac: be(),\n            luhn: Ee()\n        };\n    }\n    var g = class {\n        constructor(e){\n            if (this.opts = {}, this.defaults = {}, this.messages = nt(), this.rules = ut(), this.aliases = {}, this.cache = new Map, e) {\n                if (y(this.opts, e), e.defaults && y(this.defaults, e.defaults), e.messages) for(let s in e.messages)this.addMessage(s, e.messages[s]);\n                if (e.aliases) for(let s in e.aliases)this.alias(s, e.aliases[s]);\n                if (e.customRules) for(let s in e.customRules)this.add(s, e.customRules[s]);\n                if (e.plugins) {\n                    let s = e.plugins;\n                    if (!Array.isArray(s)) throw new Error(\"Plugins type must be array\");\n                    s.forEach(this.plugin.bind(this));\n                }\n                if (this.opts.debug) {\n                    let s = function(n) {\n                        return n;\n                    };\n                     true && (s = _e()), this._formatter = s;\n                }\n            }\n        }\n        validate(e, s) {\n            return this.compile(s)(e);\n        }\n        wrapRequiredCheckSourceCode(e, s, n, r) {\n            let a = [], { considerNullAsAValue: u = !1 } = this.opts, i, l = e.schema.optional === !0 || e.schema.type === \"forbidden\", c = u ? e.schema.nullable !== !1 || e.schema.type === \"forbidden\" : e.schema.optional === !0 || e.schema.nullable === !0 || e.schema.type === \"forbidden\";\n            if (u ? e.schema.default != null && e.schema.default != null : e.schema.default != null) {\n                l = !1, u ? e.schema.nullable === !1 && (c = !1) : e.schema.nullable !== !0 && (c = !1);\n                let f;\n                typeof e.schema.default == \"function\" ? (n.customs[e.index] || (n.customs[e.index] = {}), n.customs[e.index].defaultFn = e.schema.default, f = `context.customs[${e.index}].defaultFn.call(this, context.rules[${e.index}].schema, field, parent, context)`) : f = JSON.stringify(e.schema.default), i = `\n\t\t\t\tvalue = ${f};\n\t\t\t\t${r} = value;\n\t\t\t`;\n            } else i = this.makeError({\n                type: \"required\",\n                actual: \"value\",\n                messages: e.messages\n            });\n            return a.push(`\n\t\t\t${`if (value === undefined) { ${l ? `\n// allow undefined\n` : i} }`}\n\t\t\t${`else if (value === null) { ${c ? `\n// allow null\n` : i} }`}\n\t\t\t${s ? `else { ${s} }` : \"\"}\n\t\t`), a.join(`\n`);\n        }\n        compile(e) {\n            if (e === null || typeof e != \"object\") throw new Error(\"Invalid schema.\");\n            let s = this, n = {\n                index: 0,\n                async: e.$$async === !0,\n                rules: [],\n                fn: [],\n                customs: {},\n                utils: {\n                    replace: at\n                }\n            };\n            if (this.cache.clear(), delete e.$$async, n.async && !d) throw new Error(\"Asynchronous mode is not supported.\");\n            if (e.$$root !== !0) if (Array.isArray(e)) e = this.getRuleFromSchema(e).schema;\n            else {\n                let p = Object.assign({}, e);\n                e = {\n                    type: \"object\",\n                    strict: p.$$strict,\n                    properties: p\n                }, delete p.$$strict;\n            }\n            let r = [\n                \"var errors = [];\",\n                \"var field;\",\n                \"var parent = null;\",\n                `var label = ${e.label ? '\"' + e.label + '\"' : \"null\"};`\n            ], a = this.getRuleFromSchema(e);\n            r.push(this.compileRule(a, n, null, `${n.async ? \"await \" : \"\"}context.fn[%%INDEX%%](value, field, null, errors, context, label);`, \"value\")), r.push(\"if (errors.length) {\"), r.push(`\n\t\t\treturn errors.map(err => {\n\t\t\t\tif (err.message) {\n\t\t\t\t\terr.message = context.utils.replace(err.message, /\\\\{field\\\\}/g, err.label || err.field);\n\t\t\t\t\terr.message = context.utils.replace(err.message, /\\\\{expected\\\\}/g, err.expected);\n\t\t\t\t\terr.message = context.utils.replace(err.message, /\\\\{actual\\\\}/g, err.actual);\n\t\t\t\t}\n\t\t\t\tif(!err.label) delete err.label\n\t\t\t\treturn err;\n\t\t\t});\n\t\t`), r.push(\"}\"), r.push(\"return true;\");\n            let u = r.join(`\n`), i = n.async ? d : Function, l = new i(\"value\", \"context\", u);\n            this.opts.debug && console.log(this._formatter(`// Main check function\n` + l.toString())), this.cache.clear();\n            let c = function(p, f) {\n                return n.data = p, f && f.meta && (n.meta = f.meta), l.call(s, p, n);\n            };\n            return c.async = n.async, c;\n        }\n        compileRule(e, s, n, r, a) {\n            let u = [], i = this.cache.get(e.schema);\n            if (i) e = i, e.cycle = !0, e.cycleStack = [], u.push(this.wrapRequiredCheckSourceCode(e, `\n\t\t\t\tvar rule = context.rules[${e.index}];\n\t\t\t\tif (rule.cycleStack.indexOf(value) === -1) {\n\t\t\t\t\trule.cycleStack.push(value);\n\t\t\t\t\t${r.replace(/%%INDEX%%/g, e.index)}\n\t\t\t\t\trule.cycleStack.pop(value);\n\t\t\t\t}\n\t\t\t`, s, a));\n            else {\n                this.cache.set(e.schema, e), e.index = s.index, s.rules[s.index] = e;\n                let l = n ?? \"$$root\";\n                s.index++;\n                let c = e.ruleFunction.call(this, e, n, s);\n                c.source = c.source.replace(/%%INDEX%%/g, e.index);\n                let p = s.async ? d : Function, f = new p(\"value\", \"field\", \"parent\", \"errors\", \"context\", \"label\", c.source);\n                s.fn[e.index] = f.bind(this), u.push(this.wrapRequiredCheckSourceCode(e, r.replace(/%%INDEX%%/g, e.index), s, a)), u.push(this.makeCustomValidator({\n                    vName: a,\n                    path: l,\n                    schema: e.schema,\n                    context: s,\n                    messages: e.messages,\n                    ruleIndex: e.index\n                })), this.opts.debug && console.log(this._formatter(`// Context.fn[${e.index}]\n` + f.toString()));\n            }\n            return u.join(`\n`);\n        }\n        getRuleFromSchema(e) {\n            e = this.resolveType(e);\n            let s = this.aliases[e.type];\n            s && (delete e.type, e = y(e, s, {\n                skipIfExist: !0\n            }));\n            let n = this.rules[e.type];\n            if (!n) throw new Error(\"Invalid '\" + e.type + \"' type in validator schema.\");\n            return {\n                messages: Object.assign({}, this.messages, e.messages),\n                schema: y(e, this.defaults[e.type], {\n                    skipIfExist: !0\n                }),\n                ruleFunction: n\n            };\n        }\n        parseShortHand(e) {\n            let s = e.split(\"|\").map((a)=>a.trim()), n = s[0], r;\n            return n.endsWith(\"[]\") ? r = this.getRuleFromSchema({\n                type: \"array\",\n                items: n.slice(0, -2)\n            }).schema : r = {\n                type: s[0]\n            }, s.slice(1).map((a)=>{\n                let u = a.indexOf(\":\");\n                if (u !== -1) {\n                    let i = a.substr(0, u).trim(), l = a.substr(u + 1).trim();\n                    l === \"true\" || l === \"false\" ? l = l === \"true\" : Number.isNaN(Number(l)) || (l = Number(l)), r[i] = l;\n                } else a.startsWith(\"no-\") ? r[a.slice(3)] = !1 : r[a] = !0;\n            }), r;\n        }\n        makeError({ type: e, field: s, expected: n, actual: r, messages: a }) {\n            let u = {\n                type: `\"${e}\"`,\n                message: `\"${a[e]}\"`\n            };\n            return s ? u.field = `\"${s}\"` : u.field = \"field\", n != null && (u.expected = n), r != null && (u.actual = r), u.label = \"label\", `errors.push({ ${Object.keys(u).map((l)=>`${l}: ${u[l]}`).join(\", \")} });`;\n        }\n        makeCustomValidator({ vName: e = \"value\", fnName: s = \"custom\", ruleIndex: n, path: r, schema: a, context: u, messages: i }) {\n            let l = \"rule\" + n, c = \"fnCustomErrors\" + n;\n            if (typeof a[s] == \"function\") {\n                if (u.customs[n] ? (u.customs[n].messages = i, u.customs[n].schema = a) : u.customs[n] = {\n                    messages: i,\n                    schema: a\n                }, this.opts.useNewCustomCheckerFunction) return `\n               \t\tconst ${l} = context.customs[${n}];\n\t\t\t\t\tconst ${c} = [];\n\t\t\t\t\t${e} = ${u.async ? \"await \" : \"\"}${l}.schema.${s}.call(this, ${e}, ${c} , ${l}.schema, \"${r}\", parent, context);\n\t\t\t\t\tif (Array.isArray(${c} )) {\n                  \t\t${c} .forEach(err => errors.push(Object.assign({ message: ${l}.messages[err.type], field }, err)));\n\t\t\t\t\t}\n\t\t\t\t`;\n                let p = \"res_\" + l;\n                return `\n\t\t\t\tconst ${l} = context.customs[${n}];\n\t\t\t\tconst ${p} = ${u.async ? \"await \" : \"\"}${l}.schema.${s}.call(this, ${e}, ${l}.schema, \"${r}\", parent, context);\n\t\t\t\tif (Array.isArray(${p})) {\n\t\t\t\t\t${p}.forEach(err => errors.push(Object.assign({ message: ${l}.messages[err.type], field }, err)));\n\t\t\t\t}\n\t\t`;\n            }\n            return \"\";\n        }\n        add(e, s) {\n            this.rules[e] = s;\n        }\n        addMessage(e, s) {\n            this.messages[e] = s;\n        }\n        alias(e, s) {\n            if (this.rules[e]) throw new Error(\"Alias name must not be a rule name\");\n            this.aliases[e] = s;\n        }\n        plugin(e) {\n            if (typeof e != \"function\") throw new Error(\"Plugin fn type must be function\");\n            return e(this);\n        }\n        resolveType(e) {\n            if (typeof e == \"string\") e = this.parseShortHand(e);\n            else if (Array.isArray(e)) {\n                if (e.length === 0) throw new Error(\"Invalid schema.\");\n                e = {\n                    type: \"multi\",\n                    rules: e\n                }, e.rules.map((a)=>this.getRuleFromSchema(a)).every((a)=>a.schema.optional === !0) && (e.optional = !0);\n                let n = !this.opts.considerNullAsAValue;\n                e.rules.map((a)=>this.getRuleFromSchema(a)).every((a)=>a.schema.nullable === n) && (e.nullable = n);\n            }\n            if (e.$$type) {\n                let s = e.$$type, n = this.getRuleFromSchema(s).schema;\n                delete e.$$type;\n                let r = Object.assign({}, e);\n                for(let a in e)delete e[a];\n                y(e, n, {\n                    skipIfExist: !0\n                }), e.props = r;\n            }\n            return e;\n        }\n        normalize(e) {\n            let s = this.resolveType(e);\n            if (this.aliases[s.type] && (s = y(s, this.normalize(this.aliases[s.type]), {\n                skipIfExists: !0\n            })), s = y(s, this.defaults[s.type], {\n                skipIfExist: !0\n            }), s.type === \"multi\") return s.rules = s.rules.map((n)=>this.normalize(n)), s.optional = s.rules.every((n)=>n.optional === !0), s;\n            if (s.type === \"array\") return s.items = this.normalize(s.items), s;\n            if (s.type === \"object\" && s.props && Object.entries(s.props).forEach(([n, r])=>s.props[n] = this.normalize(r)), typeof e == \"object\") if (e.type) {\n                let n = this.normalize(e.type);\n                y(s, n, {\n                    skipIfExists: !0\n                });\n            } else Object.entries(e).forEach(([n, r])=>s[n] = this.normalize(r));\n            return s;\n        }\n    };\n    ke.exports = g;\n});\nvar je = o((Ct, we)=>{\n    \"use strict\";\n    we.exports = Ie();\n});\nfunction Te(t) {\n    let e = je(), n = new e().compile(t);\n    return {\n        validate (r) {\n            let a = n(r);\n            if (Array.isArray(a)) throw new Error(\"Validation failed\", {\n                cause: a\n            });\n            return a;\n        }\n    };\n}\nfunction Se(t) {\n    return {\n        validate (e) {\n            let { error: s, warning: n } = t.validate(e);\n            if (s) throw s;\n            if (n) throw n;\n            return !0;\n        }\n    };\n}\nfunction Pe(t) {\n    return {\n        validate: (e)=>t.validateSync(e)\n    };\n}\nfunction Ne(t) {\n    return {\n        validate: (e)=>t.parse(e)\n    };\n}\nvar lt = class extends Error {\n    constructor(t){\n        super(t[0].message), this.name = \"ValiError\", this.issues = t;\n    }\n}, Ht = Symbol(\"brand\");\nfunction Oe(t, e, s) {\n    let n = t._parse(e, s);\n    if (n.issues) throw new lt(n.issues);\n    return n.output;\n}\nfunction Re(t) {\n    return {\n        validate (e) {\n            return Oe(t, e);\n        }\n    };\n}\nfunction Fe(t, e) {\n    switch(t){\n        case \"Yup\":\n            return Pe(e);\n        case \"FastestValidator\":\n            return Te(e);\n        case \"Joi\":\n            return Se(e);\n        case \"Zod\":\n            return Ne(e);\n        case \"Valibot\":\n            return Re(e);\n        default:\n            throw new Error(`Does not support ${t} validation yet!`);\n    }\n}\nfunction rr({ type: t, schema: e, mode: s = \"query\" }) {\n    return it([\n        {\n            type: t,\n            schema: e,\n            mode: s\n        }\n    ]);\n}\nfunction it(t) {\n    return (e)=>async (s, n, r)=>{\n            try {\n                if (t.forEach((a)=>{\n                    Fe(a.type, a.schema).validate(s[a.mode ?? \"query\"]);\n                }), r) {\n                    r();\n                    return;\n                }\n                if (e) return e(s, n);\n                n.status(404).end();\n            } catch (a) {\n                n.status(400).send(a);\n            }\n        };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC12YWxpZGF0aW9ucy9kaXN0L2VzbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLElBQUUsQ0FBQ0MsQ0FBQUEsSUFBRyxLQUFrQixHQUFDQyxvRkFBT0EsR0FBQyxDQUE2RUQsRUFBRyxTQUFTQSxDQUFDO0lBQUUsSUFBRyxJQUFrQixFQUFDLE9BQU9DLG9GQUFPQSxDQUFDSyxLQUFLLENBQUMsSUFBSSxFQUFDQztJQUFXLE1BQU1DLE1BQU0seUJBQXVCUixJQUFFO0FBQXFCO0FBQUcsSUFBSVMsSUFBRSxDQUFDVCxHQUFFSSxJQUFJLElBQUtBLENBQUFBLEtBQUdKLEVBQUUsQ0FBQ0ksSUFBRTtZQUFDTSxTQUFRLENBQUM7UUFBQyxHQUFHQSxPQUFPLEVBQUNOLElBQUdBLEVBQUVNLE9BQU87QUFBRSxJQUFJQyxJQUFFRixFQUFFLENBQUNHLElBQUdDO0lBQUs7SUFBYSxTQUFTQyxHQUFHZCxDQUFDO1FBQUUsT0FBTyxPQUFPQSxLQUFHLFlBQVVlLE1BQU1DLE9BQU8sQ0FBQ2hCLE1BQUlBLEtBQUcsT0FBSyxDQUFDLElBQUVpQixPQUFPQyxJQUFJLENBQUNsQixHQUFHbUIsTUFBTSxHQUFDO0lBQUM7SUFBQyxTQUFTQyxFQUFFcEIsQ0FBQyxFQUFDSSxDQUFDLEVBQUNDLElBQUUsQ0FBQyxDQUFDO1FBQUUsSUFBSSxJQUFJZ0IsS0FBS2pCLEVBQUUsSUFBR1UsR0FBR1YsQ0FBQyxDQUFDaUIsRUFBRSxHQUFFckIsQ0FBQyxDQUFDcUIsRUFBRSxHQUFDckIsQ0FBQyxDQUFDcUIsRUFBRSxJQUFFLENBQUMsR0FBRUQsRUFBRXBCLENBQUMsQ0FBQ3FCLEVBQUUsRUFBQ2pCLENBQUMsQ0FBQ2lCLEVBQUUsRUFBQ2hCO2FBQU87WUFBQyxJQUFHQSxFQUFFaUIsV0FBVyxLQUFHLENBQUMsS0FBR3RCLENBQUMsQ0FBQ3FCLEVBQUUsS0FBRyxLQUFLLEdBQUU7WUFBU3JCLENBQUMsQ0FBQ3FCLEVBQUUs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R0EsRUFBRXlYLE1BQU0sQ0FBQyxLQUFLQyxHQUFHO1lBQUUsRUFBQyxPQUFNclMsR0FBRTtnQkFBQ3JGLEVBQUV5WCxNQUFNLENBQUMsS0FBS0UsSUFBSSxDQUFDdFM7WUFBRTtRQUFDO0FBQUM7QUFBb0QsQ0FDcm9GLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3BpcnVucmFqLy4vbm9kZV9tb2R1bGVzL25leHQtdmFsaWRhdGlvbnMvZGlzdC9lc20vaW5kZXguanM/NGQ2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaD0odD0+dHlwZW9mIHJlcXVpcmU8XCJ1XCI/cmVxdWlyZTp0eXBlb2YgUHJveHk8XCJ1XCI/bmV3IFByb3h5KHQse2dldDooZSxzKT0+KHR5cGVvZiByZXF1aXJlPFwidVwiP3JlcXVpcmU6ZSlbc119KTp0KShmdW5jdGlvbih0KXtpZih0eXBlb2YgcmVxdWlyZTxcInVcIilyZXR1cm4gcmVxdWlyZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dGhyb3cgRXJyb3IoJ0R5bmFtaWMgcmVxdWlyZSBvZiBcIicrdCsnXCIgaXMgbm90IHN1cHBvcnRlZCcpfSk7dmFyIG89KHQsZSk9PigpPT4oZXx8dCgoZT17ZXhwb3J0czp7fX0pLmV4cG9ydHMsZSksZS5leHBvcnRzKTt2YXIgXz1vKChjdCxBKT0+e1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIENlKHQpe3JldHVybiB0eXBlb2YgdCE9XCJvYmplY3RcInx8QXJyYXkuaXNBcnJheSh0KXx8dD09bnVsbD8hMTpPYmplY3Qua2V5cyh0KS5sZW5ndGg+MH1mdW5jdGlvbiB4KHQsZSxzPXt9KXtmb3IobGV0IG4gaW4gZSlpZihDZShlW25dKSl0W25dPXRbbl18fHt9LHgodFtuXSxlW25dLHMpO2Vsc2V7aWYocy5za2lwSWZFeGlzdD09PSEwJiZ0W25dIT09dm9pZCAwKWNvbnRpbnVlO3Rbbl09ZVtuXX1yZXR1cm4gdH1BLmV4cG9ydHM9eH0pO3ZhciBJPW8oKHB0LGspPT57XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gTWUodCl7cmV0dXJuIHQ9PT12b2lkIDB8fHQ9PT1udWxsP1wiXCI6dHlwZW9mIHQudG9TdHJpbmc9PVwiZnVuY3Rpb25cIj90OnR5cGVvZiB0fWsuZXhwb3J0cz0odCxlLHMpPT50LnJlcGxhY2UoZSxNZShzKSl9KTt2YXIgaj1vKChmdCx3KT0+e1widXNlIHN0cmljdFwiO3cuZXhwb3J0cz17cmVxdWlyZWQ6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIGlzIHJlcXVpcmVkLlwiLHN0cmluZzpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIHN0cmluZy5cIixzdHJpbmdFbXB0eTpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBub3QgYmUgZW1wdHkuXCIsc3RyaW5nTWluOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBsZW5ndGggbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8ge2V4cGVjdGVkfSBjaGFyYWN0ZXJzIGxvbmcuXCIsc3RyaW5nTWF4OlwiVGhlICd7ZmllbGR9JyBmaWVsZCBsZW5ndGggbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge2V4cGVjdGVkfSBjaGFyYWN0ZXJzIGxvbmcuXCIsc3RyaW5nTGVuZ3RoOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBsZW5ndGggbXVzdCBiZSB7ZXhwZWN0ZWR9IGNoYXJhY3RlcnMgbG9uZy5cIixzdHJpbmdQYXR0ZXJuOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBmYWlscyB0byBtYXRjaCB0aGUgcmVxdWlyZWQgcGF0dGVybi5cIixzdHJpbmdDb250YWluczpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBjb250YWluIHRoZSAne2V4cGVjdGVkfScgdGV4dC5cIixzdHJpbmdFbnVtOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIGFsbG93ZWQgdmFsdWVzLlwiLHN0cmluZ051bWVyaWM6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYSBudW1lcmljIHN0cmluZy5cIixzdHJpbmdBbHBoYTpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhbiBhbHBoYWJldGljIHN0cmluZy5cIixzdHJpbmdBbHBoYW51bTpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhbiBhbHBoYW51bWVyaWMgc3RyaW5nLlwiLHN0cmluZ0FscGhhZGFzaDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhbiBhbHBoYWRhc2ggc3RyaW5nLlwiLHN0cmluZ0hleDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIGhleCBzdHJpbmcuXCIsc3RyaW5nU2luZ2xlTGluZTpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIHNpbmdsZSBsaW5lIHN0cmluZy5cIixzdHJpbmdCYXNlNjQ6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYSBiYXNlNjQgc3RyaW5nLlwiLG51bWJlcjpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIG51bWJlci5cIixudW1iZXJNaW46XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHtleHBlY3RlZH0uXCIsbnVtYmVyTWF4OlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB7ZXhwZWN0ZWR9LlwiLG51bWJlckVxdWFsOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGVxdWFsIHRvIHtleHBlY3RlZH0uXCIsbnVtYmVyTm90RXF1YWw6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIGNhbid0IGJlIGVxdWFsIHRvIHtleHBlY3RlZH0uXCIsbnVtYmVySW50ZWdlcjpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhbiBpbnRlZ2VyLlwiLG51bWJlclBvc2l0aXZlOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyLlwiLG51bWJlck5lZ2F0aXZlOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGEgbmVnYXRpdmUgbnVtYmVyLlwiLGFycmF5OlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGFuIGFycmF5LlwiLGFycmF5RW1wdHk6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3Qgbm90IGJlIGFuIGVtcHR5IGFycmF5LlwiLGFycmF5TWluOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qge2V4cGVjdGVkfSBpdGVtcy5cIixhcnJheU1heDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBjb250YWluIGxlc3MgdGhhbiBvciBlcXVhbCB0byB7ZXhwZWN0ZWR9IGl0ZW1zLlwiLGFycmF5TGVuZ3RoOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGNvbnRhaW4ge2V4cGVjdGVkfSBpdGVtcy5cIixhcnJheUNvbnRhaW5zOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGNvbnRhaW4gdGhlICd7ZXhwZWN0ZWR9JyBpdGVtLlwiLGFycmF5VW5pcXVlOlwiVGhlICd7YWN0dWFsfScgdmFsdWUgaW4gJ3tmaWVsZH0nIGZpZWxkIGRvZXMgbm90IHVuaXF1ZSB0aGUgJ3tleHBlY3RlZH0nIHZhbHVlcy5cIixhcnJheUVudW06XCJUaGUgJ3thY3R1YWx9JyB2YWx1ZSBpbiAne2ZpZWxkfScgZmllbGQgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSAne2V4cGVjdGVkfScgdmFsdWVzLlwiLHR1cGxlOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGFuIGFycmF5LlwiLHR1cGxlRW1wdHk6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3Qgbm90IGJlIGFuIGVtcHR5IGFycmF5LlwiLHR1cGxlTGVuZ3RoOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGNvbnRhaW4ge2V4cGVjdGVkfSBpdGVtcy5cIixib29sZWFuOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGEgYm9vbGVhbi5cIixjdXJyZW5jeTpcIlRoZSAne2ZpZWxkfScgbXVzdCBiZSBhIHZhbGlkIGN1cnJlbmN5IGZvcm1hdFwiLGRhdGU6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYSBEYXRlLlwiLGRhdGVNaW46XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHtleHBlY3RlZH0uXCIsZGF0ZU1heDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8ge2V4cGVjdGVkfS5cIixlbnVtVmFsdWU6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIHZhbHVlICd7ZXhwZWN0ZWR9JyBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIGFsbG93ZWQgdmFsdWVzLlwiLGVxdWFsVmFsdWU6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIHZhbHVlIG11c3QgYmUgZXF1YWwgdG8gJ3tleHBlY3RlZH0nLlwiLGVxdWFsRmllbGQ6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIHZhbHVlIG11c3QgYmUgZXF1YWwgdG8gJ3tleHBlY3RlZH0nIGZpZWxkIHZhbHVlLlwiLGZvcmJpZGRlbjpcIlRoZSAne2ZpZWxkfScgZmllbGQgaXMgZm9yYmlkZGVuLlwiLGZ1bmN0aW9uOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGEgZnVuY3Rpb24uXCIsZW1haWw6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYSB2YWxpZCBlLW1haWwuXCIsZW1haWxFbXB0eTpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBub3QgYmUgZW1wdHkuXCIsZW1haWxNaW46XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIGxlbmd0aCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB7ZXhwZWN0ZWR9IGNoYXJhY3RlcnMgbG9uZy5cIixlbWFpbE1heDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbGVuZ3RoIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHtleHBlY3RlZH0gY2hhcmFjdGVycyBsb25nLlwiLGx1aG46XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYSB2YWxpZCBjaGVja3N1bSBsdWhuLlwiLG1hYzpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIHZhbGlkIE1BQyBhZGRyZXNzLlwiLG9iamVjdDpcIlRoZSAne2ZpZWxkfScgbXVzdCBiZSBhbiBPYmplY3QuXCIsb2JqZWN0U3RyaWN0OlwiVGhlIG9iamVjdCAne2ZpZWxkfScgY29udGFpbnMgZm9yYmlkZGVuIGtleXM6ICd7YWN0dWFsfScuXCIsb2JqZWN0TWluUHJvcHM6XCJUaGUgb2JqZWN0ICd7ZmllbGR9JyBtdXN0IGNvbnRhaW4gYXQgbGVhc3Qge2V4cGVjdGVkfSBwcm9wZXJ0aWVzLlwiLG9iamVjdE1heFByb3BzOlwiVGhlIG9iamVjdCAne2ZpZWxkfScgbXVzdCBjb250YWluIHtleHBlY3RlZH0gcHJvcGVydGllcyBhdCBtb3N0LlwiLHVybDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIHZhbGlkIFVSTC5cIix1cmxFbXB0eTpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBub3QgYmUgZW1wdHkuXCIsdXVpZDpcIlRoZSAne2ZpZWxkfScgZmllbGQgbXVzdCBiZSBhIHZhbGlkIFVVSUQuXCIsdXVpZFZlcnNpb246XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYSB2YWxpZCBVVUlEIHZlcnNpb24gcHJvdmlkZWQuXCIsY2xhc3NJbnN0YW5jZU9mOlwiVGhlICd7ZmllbGR9JyBmaWVsZCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIHRoZSAne2V4cGVjdGVkfScgY2xhc3MuXCIsb2JqZWN0SUQ6XCJUaGUgJ3tmaWVsZH0nIGZpZWxkIG11c3QgYmUgYW4gdmFsaWQgT2JqZWN0SURcIixyZWNvcmQ6XCJUaGUgJ3tmaWVsZH0nIG11c3QgYmUgYW4gT2JqZWN0LlwifX0pO3ZhciBTPW8oKHl0LFQpPT57XCJ1c2Ugc3RyaWN0XCI7VC5leHBvcnRzPWZ1bmN0aW9uKCl7bGV0IHQ9W107cmV0dXJuIHQucHVzaChgXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c291cmNlOnQuam9pbihgXG5gKX19fSk7dmFyIE49bygoZHQsUCk9PntcInVzZSBzdHJpY3RcIjtQLmV4cG9ydHM9ZnVuY3Rpb24oe3NjaGVtYTp0LG1lc3NhZ2VzOmV9LHMsbil7bGV0IHI9W10sYT0hMTtpZih0LmNvbnZlcnQ9PT0hMCYmKGE9ITAsci5wdXNoKGBcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUgIT0gbnVsbCkge1xuXHRcdFx0XHR2YWx1ZSA9IFt2YWx1ZV07XG5cdFx0XHR9XG5cdFx0YCkpLHIucHVzaChgXG5cdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImFycmF5XCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0dmFyIGxlbiA9IHZhbHVlLmxlbmd0aDtcblx0YCksdC5lbXB0eT09PSExJiZyLnB1c2goYFxuXHRcdFx0aWYgKGxlbiA9PT0gMCkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiYXJyYXlFbXB0eVwiLGFjdHVhbDpcInZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0fVxuXHRcdGApLHQubWluIT1udWxsJiZyLnB1c2goYFxuXHRcdFx0aWYgKGxlbiA8ICR7dC5taW59KSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJhcnJheU1pblwiLGV4cGVjdGVkOnQubWluLGFjdHVhbDpcImxlblwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSx0Lm1heCE9bnVsbCYmci5wdXNoKGBcblx0XHRcdGlmIChsZW4gPiAke3QubWF4fSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiYXJyYXlNYXhcIixleHBlY3RlZDp0Lm1heCxhY3R1YWw6XCJsZW5cIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0YCksdC5sZW5ndGghPW51bGwmJnIucHVzaChgXG5cdFx0XHRpZiAobGVuICE9PSAke3QubGVuZ3RofSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiYXJyYXlMZW5ndGhcIixleHBlY3RlZDp0Lmxlbmd0aCxhY3R1YWw6XCJsZW5cIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0YCksdC5jb250YWlucyE9bnVsbCYmci5wdXNoKGBcblx0XHRcdGlmICh2YWx1ZS5pbmRleE9mKCR7SlNPTi5zdHJpbmdpZnkodC5jb250YWlucyl9KSA9PT0gLTEpIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImFycmF5Q29udGFpbnNcIixleHBlY3RlZDpKU09OLnN0cmluZ2lmeSh0LmNvbnRhaW5zKSxhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSx0LnVuaXF1ZT09PSEwJiZyLnB1c2goYFxuXHRcdFx0aWYobGVuID4gKG5ldyBTZXQodmFsdWUpKS5zaXplKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJhcnJheVVuaXF1ZVwiLGV4cGVjdGVkOlwiQXJyYXkuZnJvbShuZXcgU2V0KHZhbHVlLmZpbHRlcigoaXRlbSwgaW5kZXgpID0+IHZhbHVlLmluZGV4T2YoaXRlbSkgIT09IGluZGV4KSkpXCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0YCksdC5lbnVtIT1udWxsKXtsZXQgdT1KU09OLnN0cmluZ2lmeSh0LmVudW0pO3IucHVzaChgXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmICgke3V9LmluZGV4T2YodmFsdWVbaV0pID09PSAtMSkge1xuXHRcdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJhcnJheUVudW1cIixleHBlY3RlZDonXCInK3QuZW51bS5qb2luKFwiLCBcIikrJ1wiJyxhY3R1YWw6XCJ2YWx1ZVtpXVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdGApfWlmKHQuaXRlbXMhPW51bGwpe3IucHVzaChgXG5cdFx0XHR2YXIgYXJyID0gdmFsdWU7XG5cdFx0XHR2YXIgcGFyZW50RmllbGQgPSBmaWVsZDtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhbHVlID0gYXJyW2ldO1xuXHRcdGApO2xldCB1PXMrXCJbXVwiLGk9dGhpcy5nZXRSdWxlRnJvbVNjaGVtYSh0Lml0ZW1zKSxsPWBhcnJbaV0gPSAke24uYXN5bmM/XCJhd2FpdCBcIjpcIlwifWNvbnRleHQuZm5bJSVJTkRFWCUlXShhcnJbaV0sIChwYXJlbnRGaWVsZCA/IHBhcmVudEZpZWxkIDogXCJcIikgKyBcIltcIiArIGkgKyBcIl1cIiwgcGFyZW50LCBlcnJvcnMsIGNvbnRleHQpYDtyLnB1c2godGhpcy5jb21waWxlUnVsZShpLG4sdSxsLFwiYXJyW2ldXCIpKSxyLnB1c2goYFxuXHRcdFx0fVxuXHRcdGApLHIucHVzaChgXG5cdFx0cmV0dXJuIGFycjtcblx0YCl9ZWxzZSByLnB1c2goYFxuXHRcdHJldHVybiB2YWx1ZTtcblx0YCk7cmV0dXJue3Nhbml0aXplZDphLHNvdXJjZTpyLmpvaW4oYFxuYCl9fX0pO3ZhciBSPW8oKGh0LE8pPT57XCJ1c2Ugc3RyaWN0XCI7Ty5leHBvcnRzPWZ1bmN0aW9uKHtzY2hlbWE6dCxtZXNzYWdlczplfSxzLG4pe2xldCByPVtdLGE9ITE7cmV0dXJuIHIucHVzaChgXG5cdFx0dmFyIG9yaWdWYWx1ZSA9IHZhbHVlO1xuXHRgKSx0LmNvbnZlcnQ9PT0hMCYmKGE9ITAsci5wdXNoKGBcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0dmFsdWUgPT09IDFcblx0XHRcdFx0fHwgdmFsdWUgPT09IFwidHJ1ZVwiXG5cdFx0XHRcdHx8IHZhbHVlID09PSBcIjFcIlxuXHRcdFx0XHR8fCB2YWx1ZSA9PT0gXCJvblwiXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIGlmIChcblx0XHRcdFx0dmFsdWUgPT09IDBcblx0XHRcdFx0fHwgdmFsdWUgPT09IFwiZmFsc2VcIlxuXHRcdFx0XHR8fCB2YWx1ZSA9PT0gXCIwXCJcblx0XHRcdFx0fHwgdmFsdWUgPT09IFwib2ZmXCJcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdGApKSxyLnB1c2goYFxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiYm9vbGVhblwiLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c2FuaXRpemVkOmEsc291cmNlOnIuam9pbihgXG5gKX19fSk7dmFyIHE9bygodnQsRik9PntcInVzZSBzdHJpY3RcIjtGLmV4cG9ydHM9ZnVuY3Rpb24oe3NjaGVtYTp0LG1lc3NhZ2VzOmUsaW5kZXg6c30sbixyKXtsZXQgYT1bXSx1PXQuaW5zdGFuY2VPZi5uYW1lP3QuaW5zdGFuY2VPZi5uYW1lOlwiPFVua25vd0NsYXNzPlwiO3JldHVybiByLmN1c3RvbXNbc10/ci5jdXN0b21zW3NdLnNjaGVtYT10OnIuY3VzdG9tc1tzXT17c2NoZW1hOnR9LGEucHVzaChgXG5cdFx0aWYgKCEodmFsdWUgaW5zdGFuY2VvZiBjb250ZXh0LmN1c3RvbXNbJHtzfV0uc2NoZW1hLmluc3RhbmNlT2YpKVxuXHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImNsYXNzSW5zdGFuY2VPZlwiLGFjdHVhbDpcInZhbHVlXCIsZXhwZWN0ZWQ6XCInXCIrdStcIidcIixtZXNzYWdlczplfSl9XG5cdGApLGEucHVzaChgXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c291cmNlOmEuam9pbihgXG5gKX19fSk7dmFyIHo9bygobXQsVik9PntcInVzZSBzdHJpY3RcIjtWLmV4cG9ydHM9ZnVuY3Rpb24oe3NjaGVtYTp0LG1lc3NhZ2VzOmUsaW5kZXg6c30sbixyKXtsZXQgYT1bXTtyZXR1cm4gYS5wdXNoKGBcblx0XHQke3RoaXMubWFrZUN1c3RvbVZhbGlkYXRvcih7Zm5OYW1lOlwiY2hlY2tcIixwYXRoOm4sc2NoZW1hOnQsbWVzc2FnZXM6ZSxjb250ZXh0OnIscnVsZUluZGV4OnN9KX1cblx0XHRyZXR1cm4gdmFsdWU7XG5cdGApLHtzb3VyY2U6YS5qb2luKGBcbmApfX19KTt2YXIgTT1vKChidCxDKT0+e1widXNlIHN0cmljdFwiO3ZhciBEZT1cIig/PS4qXFxcXGQpXigtP34xfH4xLT8pKChbMC05XVxcXFxkezAsMn0ofjJcXFxcZHszfSkqKXwwKT8oXFxcXH4zXFxcXGR7MSwyfSk/JFwiO0MuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj10LmN1cnJlbmN5U3ltYm9sfHxudWxsLGE9dC50aG91c2FuZFNlcGFyYXRvcnx8XCIsXCIsdT10LmRlY2ltYWxTZXBhcmF0b3J8fFwiLlwiLGk9dC5jdXN0b21SZWdleCxsPSF0LnN5bWJvbE9wdGlvbmFsLGM9RGUucmVwbGFjZSgvfjEvZyxyP2BcXFxcJHtyfSR7bD9cIlwiOlwiP1wifWA6XCJcIikucmVwbGFjZShcIn4yXCIsYSkucmVwbGFjZShcIn4zXCIsdSkscD1bXTtyZXR1cm4gcC5wdXNoKGBcblx0XHRpZiAoIXZhbHVlLm1hdGNoKCR7aXx8bmV3IFJlZ0V4cChjKX0pKSB7XG5cdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiY3VycmVuY3lcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdGApLHtzb3VyY2U6cC5qb2luKGBcbmApfX19KTt2YXIgTD1vKChndCxEKT0+e1widXNlIHN0cmljdFwiO0QuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXSxhPSExO3JldHVybiByLnB1c2goYFxuXHRcdHZhciBvcmlnVmFsdWUgPSB2YWx1ZTtcblx0YCksdC5jb252ZXJ0PT09ITAmJihhPSEwLHIucHVzaChgXG5cdFx0XHRpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpKSB7XG5cdFx0XHRcdHZhbHVlID0gbmV3IERhdGUodmFsdWUubGVuZ3RoICYmICFpc05hTigrdmFsdWUpID8gK3ZhbHVlIDogdmFsdWUpO1xuXHRcdFx0fVxuXHRcdGApKSxyLnB1c2goYFxuXHRcdGlmICghKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkgfHwgaXNOYU4odmFsdWUuZ2V0VGltZSgpKSlcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJkYXRlXCIsYWN0dWFsOlwib3JpZ1ZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c2FuaXRpemVkOmEsc291cmNlOnIuam9pbihgXG5gKX19fSk7dmFyIEg9bygoRXQsVSk9PntcInVzZSBzdHJpY3RcIjt2YXIgTGU9L14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXF0pfCgoW2EtekEtWlxcLTAtOV0rXFwuKStbYS16QS1aXXsyLH0pKSQvLFVlPS9eXFxTK0BcXFMrXFwuXFxTKyQvO1UuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXSxhPXQubW9kZT09XCJwcmVjaXNlXCI/TGU6VWUsdT0hMTtyZXR1cm4gci5wdXNoKGBcblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwic3RyaW5nXCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXHRgKSx0LmVtcHR5P3IucHVzaChgXG5cdFx0XHRpZiAodmFsdWUubGVuZ3RoID09PSAwKSByZXR1cm4gdmFsdWU7XG5cdFx0YCk6ci5wdXNoKGBcblx0XHRcdGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImVtYWlsRW1wdHlcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdGApLHQubm9ybWFsaXplJiYodT0hMCxyLnB1c2goYFxuXHRcdFx0dmFsdWUgPSB2YWx1ZS50cmltKCkudG9Mb3dlckNhc2UoKTtcblx0XHRgKSksdC5taW4hPW51bGwmJnIucHVzaChgXG5cdFx0XHRpZiAodmFsdWUubGVuZ3RoIDwgJHt0Lm1pbn0pIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImVtYWlsTWluXCIsZXhwZWN0ZWQ6dC5taW4sYWN0dWFsOlwidmFsdWUubGVuZ3RoXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0fVxuXHRcdGApLHQubWF4IT1udWxsJiZyLnB1c2goYFxuXHRcdFx0aWYgKHZhbHVlLmxlbmd0aCA+ICR7dC5tYXh9KSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJlbWFpbE1heFwiLGV4cGVjdGVkOnQubWF4LGFjdHVhbDpcInZhbHVlLmxlbmd0aFwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSxyLnB1c2goYFxuXHRcdGlmICghJHthLnRvU3RyaW5nKCl9LnRlc3QodmFsdWUpKSB7XG5cdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiZW1haWxcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdGApLHtzYW5pdGl6ZWQ6dSxzb3VyY2U6ci5qb2luKGBcbmApfX19KTt2YXIgWj1vKCgkdCxKKT0+e1widXNlIHN0cmljdFwiO0ouZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtyZXR1cm57c291cmNlOmBcblx0XHRcdGlmICgke0pTT04uc3RyaW5naWZ5KHQudmFsdWVzfHxbXSl9LmluZGV4T2YodmFsdWUpID09PSAtMSlcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImVudW1WYWx1ZVwiLGV4cGVjdGVkOidcIicrdC52YWx1ZXMuam9pbihcIiwgXCIpKydcIicsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHRcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRgfX19KTt2YXIgQj1vKCh4dCxYKT0+e1widXNlIHN0cmljdFwiO1guZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXTtyZXR1cm4gdC5maWVsZD8odC5zdHJpY3Q/ci5wdXNoKGBcblx0XHRcdFx0aWYgKHZhbHVlICE9PSBwYXJlbnRbXCIke3QuZmllbGR9XCJdKVxuXHRcdFx0YCk6ci5wdXNoKGBcblx0XHRcdFx0aWYgKHZhbHVlICE9IHBhcmVudFtcIiR7dC5maWVsZH1cIl0pXG5cdFx0XHRgKSxyLnB1c2goYFxuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiZXF1YWxGaWVsZFwiLGFjdHVhbDpcInZhbHVlXCIsZXhwZWN0ZWQ6SlNPTi5zdHJpbmdpZnkodC5maWVsZCksbWVzc2FnZXM6ZX0pfVxuXHRcdGApKToodC5zdHJpY3Q/ci5wdXNoKGBcblx0XHRcdFx0aWYgKHZhbHVlICE9PSAke0pTT04uc3RyaW5naWZ5KHQudmFsdWUpfSlcblx0XHRcdGApOnIucHVzaChgXG5cdFx0XHRcdGlmICh2YWx1ZSAhPSAke0pTT04uc3RyaW5naWZ5KHQudmFsdWUpfSlcblx0XHRcdGApLHIucHVzaChgXG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJlcXVhbFZhbHVlXCIsYWN0dWFsOlwidmFsdWVcIixleHBlY3RlZDpKU09OLnN0cmluZ2lmeSh0LnZhbHVlKSxtZXNzYWdlczplfSl9XG5cdFx0YCkpLHIucHVzaChgXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c291cmNlOnIuam9pbihgXG5gKX19fSk7dmFyIFc9bygoQXQsSyk9PntcInVzZSBzdHJpY3RcIjtLLmV4cG9ydHM9ZnVuY3Rpb24oe3NjaGVtYTplLG1lc3NhZ2VzOnN9LG4scil7bGV0IGE9W107cmV0dXJuIGEucHVzaChgXG5cdFx0aWYgKHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0YCksZS5yZW1vdmU/YS5wdXNoKGBcblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0YCk6YS5wdXNoKGBcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJmb3JiaWRkZW5cIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRgKSxhLnB1c2goYFxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0YCkse3NvdXJjZTphLmpvaW4oYFxuYCl9fX0pO3ZhciBRPW8oKF90LFkpPT57XCJ1c2Ugc3RyaWN0XCI7WS5leHBvcnRzPWZ1bmN0aW9uKHtzY2hlbWE6dCxtZXNzYWdlczplfSxzLG4pe3JldHVybntzb3VyY2U6YFxuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKVxuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwiZnVuY3Rpb25cIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGB9fX0pO3ZhciBlZT1vKChrdCxHKT0+e1widXNlIHN0cmljdFwiO0cuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXTtyLnB1c2goYFxuXHRcdHZhciBoYXNWYWxpZCA9IGZhbHNlO1xuXHRcdHZhciBuZXdWYWwgPSB2YWx1ZTtcblx0XHR2YXIgY2hlY2tFcnJvcnMgPSBbXTtcblx0XHR2YXIgZXJyb3JzU2l6ZSA9IGVycm9ycy5sZW5ndGg7XG5cdGApO2ZvcihsZXQgYT0wO2E8dC5ydWxlcy5sZW5ndGg7YSsrKXtyLnB1c2goYFxuXHRcdFx0aWYgKCFoYXNWYWxpZCkge1xuXHRcdFx0XHR2YXIgX2Vycm9ycyA9IFtdO1xuXHRcdGApO2xldCB1PXRoaXMuZ2V0UnVsZUZyb21TY2hlbWEodC5ydWxlc1thXSk7ci5wdXNoKHRoaXMuY29tcGlsZVJ1bGUodSxuLHMsYHZhciB0bXBWYWwgPSAke24uYXN5bmM/XCJhd2FpdCBcIjpcIlwifWNvbnRleHQuZm5bJSVJTkRFWCUlXSh2YWx1ZSwgZmllbGQsIHBhcmVudCwgX2Vycm9ycywgY29udGV4dCk7YCxcInRtcFZhbFwiKSksci5wdXNoKGBcblx0XHRcdFx0aWYgKGVycm9ycy5sZW5ndGggPT0gZXJyb3JzU2l6ZSAmJiBfZXJyb3JzLmxlbmd0aCA9PSAwKSB7XG5cdFx0XHRcdFx0aGFzVmFsaWQgPSB0cnVlO1xuXHRcdFx0XHRcdG5ld1ZhbCA9IHRtcFZhbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShjaGVja0Vycm9ycywgW10uY29uY2F0KF9lcnJvcnMsIGVycm9ycy5zcGxpY2UoZXJyb3JzU2l6ZSkpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdGApfXJldHVybiByLnB1c2goYFxuXHRcdGlmICghaGFzVmFsaWQpIHtcblx0XHRcdEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVycm9ycywgY2hlY2tFcnJvcnMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBuZXdWYWw7XG5cdGApLHtzb3VyY2U6ci5qb2luKGBcbmApfX19KTt2YXIgcmU9bygoSXQsdGUpPT57XCJ1c2Ugc3RyaWN0XCI7dGUuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXTtyLnB1c2goYFxuXHRcdHZhciBvcmlnVmFsdWUgPSB2YWx1ZTtcblx0YCk7bGV0IGE9ITE7cmV0dXJuIHQuY29udmVydD09PSEwJiYoYT0hMCxyLnB1c2goYFxuXHRcdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHR2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0YCkpLHIucHVzaChgXG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJudW1iZXJcIiB8fCBpc05hTih2YWx1ZSkgfHwgIWlzRmluaXRlKHZhbHVlKSkge1xuXHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcIm51bWJlclwiLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdGApLHQubWluIT1udWxsJiZyLnB1c2goYFxuXHRcdFx0aWYgKHZhbHVlIDwgJHt0Lm1pbn0pIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcIm51bWJlck1pblwiLGV4cGVjdGVkOnQubWluLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSx0Lm1heCE9bnVsbCYmci5wdXNoKGBcblx0XHRcdGlmICh2YWx1ZSA+ICR7dC5tYXh9KSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJudW1iZXJNYXhcIixleHBlY3RlZDp0Lm1heCxhY3R1YWw6XCJvcmlnVmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0YCksdC5lcXVhbCE9bnVsbCYmci5wdXNoKGBcblx0XHRcdGlmICh2YWx1ZSAhPT0gJHt0LmVxdWFsfSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwibnVtYmVyRXF1YWxcIixleHBlY3RlZDp0LmVxdWFsLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSx0Lm5vdEVxdWFsIT1udWxsJiZyLnB1c2goYFxuXHRcdFx0aWYgKHZhbHVlID09PSAke3Qubm90RXF1YWx9KSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJudW1iZXJOb3RFcXVhbFwiLGV4cGVjdGVkOnQubm90RXF1YWwsYWN0dWFsOlwib3JpZ1ZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0fVxuXHRcdGApLHQuaW50ZWdlcj09PSEwJiZyLnB1c2goYFxuXHRcdFx0aWYgKHZhbHVlICUgMSAhPT0gMCkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwibnVtYmVySW50ZWdlclwiLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSx0LnBvc2l0aXZlPT09ITAmJnIucHVzaChgXG5cdFx0XHRpZiAodmFsdWUgPD0gMCkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwibnVtYmVyUG9zaXRpdmVcIixhY3R1YWw6XCJvcmlnVmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0YCksdC5uZWdhdGl2ZT09PSEwJiZyLnB1c2goYFxuXHRcdFx0aWYgKHZhbHVlID49IDApIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcIm51bWJlck5lZ2F0aXZlXCIsYWN0dWFsOlwib3JpZ1ZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0fVxuXHRcdGApLHIucHVzaChgXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c2FuaXRpemVkOmEsc291cmNlOnIuam9pbihgXG5gKX19fSk7dmFyIGFlPW8oKHd0LHNlKT0+e1widXNlIHN0cmljdFwiO3ZhciBIZT0vXltfJGEtekEtWl1bXyRhLXpBLVowLTldKiQvLEplPS9bXCInXFxcXFxcblxcclxcdTIwMjhcXHUyMDI5XS9nO2Z1bmN0aW9uIHYodCl7cmV0dXJuIHQucmVwbGFjZShKZSxmdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZSdcIic6Y2FzZVwiJ1wiOmNhc2VcIlxcXFxcIjpyZXR1cm5cIlxcXFxcIitlO2Nhc2VgXG5gOnJldHVyblwiXFxcXG5cIjtjYXNlXCJcXHJcIjpyZXR1cm5cIlxcXFxyXCI7Y2FzZVwiXFx1MjAyOFwiOnJldHVyblwiXFxcXHUyMDI4XCI7Y2FzZVwiXFx1MjAyOVwiOnJldHVyblwiXFxcXHUyMDI5XCJ9fSl9c2UuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXTtyLnB1c2goYFxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJvYmplY3RcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdGApO2xldCBhPXQucHJvcGVydGllc3x8dC5wcm9wcztpZihhKXtyLnB1c2goXCJ2YXIgcGFyZW50T2JqID0gdmFsdWU7XCIpLHIucHVzaChcInZhciBwYXJlbnRGaWVsZCA9IGZpZWxkO1wiKTtsZXQgdT1PYmplY3Qua2V5cyhhKTtmb3IobGV0IGk9MDtpPHUubGVuZ3RoO2krKyl7bGV0IGw9dVtpXSxjPXYobCkscD1IZS50ZXN0KGMpP2AuJHtjfWA6YFsnJHtjfSddYCxmPWBwYXJlbnRPYmoke3B9YCxFPShzP3MrXCIuXCI6XCJcIikrbCwkPWFbbF0ubGFiZWwscWU9JD9gJyR7digkKX0nYDp2b2lkIDA7ci5wdXNoKGBcbi8vIEZpZWxkOiAke3YoRSl9YCksci5wdXNoKGBmaWVsZCA9IHBhcmVudEZpZWxkID8gcGFyZW50RmllbGQgKyBcIiR7cH1cIiA6IFwiJHtjfVwiO2ApLHIucHVzaChgdmFsdWUgPSAke2Z9O2ApLHIucHVzaChgbGFiZWwgPSAke3FlfWApO2xldCBWZT10aGlzLmdldFJ1bGVGcm9tU2NoZW1hKGFbbF0pLHplPWBcblx0XHRcdFx0JHtmfSA9ICR7bi5hc3luYz9cImF3YWl0IFwiOlwiXCJ9Y29udGV4dC5mblslJUlOREVYJSVdKHZhbHVlLCBmaWVsZCwgcGFyZW50T2JqLCBlcnJvcnMsIGNvbnRleHQsIGxhYmVsKTtcblx0XHRcdGA7ci5wdXNoKHRoaXMuY29tcGlsZVJ1bGUoVmUsbixFLHplLGYpKSx0aGlzLm9wdHMuaGFsdE9uRmlyc3RFcnJvcj09PSEwJiZyLnB1c2goXCJpZiAoZXJyb3JzLmxlbmd0aCkgcmV0dXJuIHBhcmVudE9iajtcIil9aWYodC5zdHJpY3Qpe2xldCBpPU9iamVjdC5rZXlzKGEpO3IucHVzaChgXG5cdFx0XHRcdGZpZWxkID0gcGFyZW50RmllbGQ7XG5cdFx0XHRcdHZhciBpbnZhbGlkUHJvcHMgPSBbXTtcblx0XHRcdFx0dmFyIHByb3BzID0gT2JqZWN0LmtleXMocGFyZW50T2JqKTtcblxuXHRcdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKCR7SlNPTi5zdHJpbmdpZnkoaSl9LmluZGV4T2YocHJvcHNbaV0pID09PSAtMSkge1xuXHRcdFx0XHRcdFx0aW52YWxpZFByb3BzLnB1c2gocHJvcHNbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaW52YWxpZFByb3BzLmxlbmd0aCkge1xuXHRcdFx0YCksdC5zdHJpY3Q9PT1cInJlbW92ZVwiPyhyLnB1c2goYFxuXHRcdFx0XHRcdGlmIChlcnJvcnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGApLHIucHVzaChgXG5cdFx0XHRcdFx0XHRpbnZhbGlkUHJvcHMuZm9yRWFjaChmdW5jdGlvbihmaWVsZCkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgcGFyZW50T2JqW2ZpZWxkXTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRgKSxyLnB1c2goYFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0YCkpOnIucHVzaChgXG5cdFx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcIm9iamVjdFN0cmljdFwiLGV4cGVjdGVkOidcIicraS5qb2luKFwiLCBcIikrJ1wiJyxhY3R1YWw6XCJpbnZhbGlkUHJvcHMuam9pbignLCAnKVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0YCksci5wdXNoKGBcblx0XHRcdFx0fVxuXHRcdFx0YCl9fXJldHVybih0Lm1pblByb3BzIT1udWxsfHx0Lm1heFByb3BzIT1udWxsKSYmKHQuc3RyaWN0P3IucHVzaChgXG5cdFx0XHRcdHByb3BzID0gT2JqZWN0LmtleXMoJHthP1wicGFyZW50T2JqXCI6XCJ2YWx1ZVwifSk7XG5cdFx0XHRgKTpyLnB1c2goYFxuXHRcdFx0XHR2YXIgcHJvcHMgPSBPYmplY3Qua2V5cygke2E/XCJwYXJlbnRPYmpcIjpcInZhbHVlXCJ9KTtcblx0XHRcdFx0JHthP1wiZmllbGQgPSBwYXJlbnRGaWVsZDtcIjpcIlwifVxuXHRcdFx0YCkpLHQubWluUHJvcHMhPW51bGwmJnIucHVzaChgXG5cdFx0XHRpZiAocHJvcHMubGVuZ3RoIDwgJHt0Lm1pblByb3BzfSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwib2JqZWN0TWluUHJvcHNcIixleHBlY3RlZDp0Lm1pblByb3BzLGFjdHVhbDpcInByb3BzLmxlbmd0aFwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHRgKSx0Lm1heFByb3BzIT1udWxsJiZyLnB1c2goYFxuXHRcdFx0aWYgKHByb3BzLmxlbmd0aCA+ICR7dC5tYXhQcm9wc30pIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcIm9iamVjdE1heFByb3BzXCIsZXhwZWN0ZWQ6dC5tYXhQcm9wcyxhY3R1YWw6XCJwcm9wcy5sZW5ndGhcIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0YCksYT9yLnB1c2goYFxuXHRcdFx0cmV0dXJuIHBhcmVudE9iajtcblx0XHRgKTpyLnB1c2goYFxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGApLHtzb3VyY2U6ci5qb2luKGBcbmApfX19KTt2YXIgdWU9bygoanQsbmUpPT57XCJ1c2Ugc3RyaWN0XCI7bmUuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZSxpbmRleDpzfSxuLHIpe2xldCBhPVtdO3JldHVybiByLmN1c3RvbXNbc10/ci5jdXN0b21zW3NdLnNjaGVtYT10OnIuY3VzdG9tc1tzXT17c2NoZW1hOnR9LGEucHVzaChgXG5cdFx0Y29uc3QgT2JqZWN0SUQgPSBjb250ZXh0LmN1c3RvbXNbJHtzfV0uc2NoZW1hLk9iamVjdElEO1xuXHRcdGlmICghT2JqZWN0SUQuaXNWYWxpZCh2YWx1ZSkpIHtcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJvYmplY3RJRFwiLGFjdHVhbDpcInZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0YCksdC5jb252ZXJ0PT09ITA/YS5wdXNoKFwicmV0dXJuIG5ldyBPYmplY3RJRCh2YWx1ZSlcIik6dC5jb252ZXJ0PT09XCJoZXhTdHJpbmdcIj9hLnB1c2goXCJyZXR1cm4gdmFsdWUudG9TdHJpbmcoKVwiKTphLnB1c2goXCJyZXR1cm4gdmFsdWVcIikse3NvdXJjZTphLmpvaW4oYFxuYCl9fX0pO3ZhciBpZT1vKChUdCxsZSk9PntcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBaZSh0KXtmb3IobGV0IGUgaW4gdC5tZXNzYWdlcyllLnN0YXJ0c1dpdGgoXCJzdHJpbmdcIikmJih0Lm1lc3NhZ2VzW2VdPXQubWVzc2FnZXNbZV0ucmVwbGFjZShcIiBmaWVsZCBcIixcIiBrZXkgXCIpKX1sZS5leHBvcnRzPWZ1bmN0aW9uKHtzY2hlbWE6ZSxtZXNzYWdlczpzfSxuLHIpe2xldCBhPVtdO2EucHVzaChgXG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInJlY29yZFwiLGFjdHVhbDpcInZhbHVlXCIsbWVzc2FnZXM6c30pfVxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0YCk7bGV0IHU9ZS5rZXl8fFwic3RyaW5nXCIsaT1lLnZhbHVlfHxcImFueVwiO2EucHVzaChgXG5cdFx0Y29uc3QgcmVjb3JkID0gdmFsdWU7XG5cdFx0bGV0IHNhbml0aXplZEtleSwgc2FuaXRpemVkVmFsdWU7XG5cdFx0Y29uc3QgcmVzdWx0ID0ge307XG5cdFx0Zm9yIChsZXQga2V5IGluIHZhbHVlKSB7XG5cdGApLGEucHVzaChcInNhbml0aXplZEtleSA9IHZhbHVlID0ga2V5O1wiKTtsZXQgbD10aGlzLmdldFJ1bGVGcm9tU2NoZW1hKHUpO1plKGwpO2xldCBjPWBcblx0XHRzYW5pdGl6ZWRLZXkgPSAke3IuYXN5bmM/XCJhd2FpdCBcIjpcIlwifWNvbnRleHQuZm5bJSVJTkRFWCUlXShrZXksIGZpZWxkID8gZmllbGQgKyBcIi5cIiArIGtleSA6IGtleSwgcmVjb3JkLCBlcnJvcnMsIGNvbnRleHQpO1xuXHRgO2EucHVzaCh0aGlzLmNvbXBpbGVSdWxlKGwscixudWxsLGMsXCJzYW5pdGl6ZWRLZXlcIikpLGEucHVzaChcInNhbml0aXplZFZhbHVlID0gdmFsdWUgPSByZWNvcmRba2V5XTtcIik7bGV0IHA9dGhpcy5nZXRSdWxlRnJvbVNjaGVtYShpKSxmPWBcblx0XHRzYW5pdGl6ZWRWYWx1ZSA9ICR7ci5hc3luYz9cImF3YWl0IFwiOlwiXCJ9Y29udGV4dC5mblslJUlOREVYJSVdKHZhbHVlLCBmaWVsZCA/IGZpZWxkICsgXCIuXCIgKyBrZXkgOiBrZXksIHJlY29yZCwgZXJyb3JzLCBjb250ZXh0KTtcblx0YDtyZXR1cm4gYS5wdXNoKHRoaXMuY29tcGlsZVJ1bGUocCxyLGAke259W2tleV1gLGYsXCJzYW5pdGl6ZWRWYWx1ZVwiKSksYS5wdXNoKFwicmVzdWx0W3Nhbml0aXplZEtleV0gPSBzYW5pdGl6ZWRWYWx1ZTtcIiksYS5wdXNoKGBcblx0XHR9XG5cdGApLGEucHVzaChcInJldHVybiByZXN1bHQ7XCIpLHtzb3VyY2U6YS5qb2luKGBcbmApfX19KTt2YXIgY2U9bygoU3Qsb2UpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIFhlPS9eLT9bMC05XVxcZCooXFwuXFxkKyk/JC8sQmU9L15bYS16QS1aXSskLyxLZT0vXlthLXpBLVowLTldKyQvLFdlPS9eW2EtekEtWjAtOV8tXSskLyxZZT0vXlswLTlhLWZBLUZdKyQvLFFlPS9eKD86W0EtWmEtejAtOStcXFxcL117NH0pKig/OltBLVphLXowLTkrXFxcXC9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvO29lLmV4cG9ydHM9ZnVuY3Rpb24oe3NjaGVtYTplLG1lc3NhZ2VzOnN9LG4scil7bGV0IGE9W10sdT0hMTtpZihlLmNvbnZlcnQ9PT0hMCYmKHU9ITAsYS5wdXNoKGBcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuXHRcdFx0fVxuXHRcdGApKSxhLnB1c2goYFxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHR2YXIgb3JpZ1ZhbHVlID0gdmFsdWU7XG5cdGApLGUudHJpbSYmKHU9ITAsYS5wdXNoKGBcblx0XHRcdHZhbHVlID0gdmFsdWUudHJpbSgpO1xuXHRcdGApKSxlLnRyaW1MZWZ0JiYodT0hMCxhLnB1c2goYFxuXHRcdFx0dmFsdWUgPSB2YWx1ZS50cmltTGVmdCgpO1xuXHRcdGApKSxlLnRyaW1SaWdodCYmKHU9ITAsYS5wdXNoKGBcblx0XHRcdHZhbHVlID0gdmFsdWUudHJpbVJpZ2h0KCk7XG5cdFx0YCkpLGUucGFkU3RhcnQpe3U9ITA7bGV0IGk9ZS5wYWRDaGFyIT1udWxsP2UucGFkQ2hhcjpcIiBcIjthLnB1c2goYFxuXHRcdFx0dmFsdWUgPSB2YWx1ZS5wYWRTdGFydCgke2UucGFkU3RhcnR9LCAke0pTT04uc3RyaW5naWZ5KGkpfSk7XG5cdFx0YCl9aWYoZS5wYWRFbmQpe3U9ITA7bGV0IGk9ZS5wYWRDaGFyIT1udWxsP2UucGFkQ2hhcjpcIiBcIjthLnB1c2goYFxuXHRcdFx0dmFsdWUgPSB2YWx1ZS5wYWRFbmQoJHtlLnBhZEVuZH0sICR7SlNPTi5zdHJpbmdpZnkoaSl9KTtcblx0XHRgKX1pZihlLmxvd2VyY2FzZSYmKHU9ITAsYS5wdXNoKGBcblx0XHRcdHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcblx0XHRgKSksZS51cHBlcmNhc2UmJih1PSEwLGEucHVzaChgXG5cdFx0XHR2YWx1ZSA9IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cdFx0YCkpLGUubG9jYWxlTG93ZXJjYXNlJiYodT0hMCxhLnB1c2goYFxuXHRcdFx0dmFsdWUgPSB2YWx1ZS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuXHRcdGApKSxlLmxvY2FsZVVwcGVyY2FzZSYmKHU9ITAsYS5wdXNoKGBcblx0XHRcdHZhbHVlID0gdmFsdWUudG9Mb2NhbGVVcHBlckNhc2UoKTtcblx0XHRgKSksYS5wdXNoKGBcblx0XHRcdHZhciBsZW4gPSB2YWx1ZS5sZW5ndGg7XG5cdGApLGUuZW1wdHk9PT0hMT9hLnB1c2goYFxuXHRcdFx0aWYgKGxlbiA9PT0gMCkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwic3RyaW5nRW1wdHlcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRcdH1cblx0XHRgKTplLmVtcHR5PT09ITAmJmEucHVzaChgXG5cdFx0XHRpZiAobGVuID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHRgKSxlLm1pbiE9bnVsbCYmYS5wdXNoKGBcblx0XHRcdGlmIChsZW4gPCAke2UubWlufSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwic3RyaW5nTWluXCIsZXhwZWN0ZWQ6ZS5taW4sYWN0dWFsOlwibGVuXCIsbWVzc2FnZXM6c30pfVxuXHRcdFx0fVxuXHRcdGApLGUubWF4IT1udWxsJiZhLnB1c2goYFxuXHRcdFx0aWYgKGxlbiA+ICR7ZS5tYXh9KSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdNYXhcIixleHBlY3RlZDplLm1heCxhY3R1YWw6XCJsZW5cIixtZXNzYWdlczpzfSl9XG5cdFx0XHR9XG5cdFx0YCksZS5sZW5ndGghPW51bGwmJmEucHVzaChgXG5cdFx0XHRpZiAobGVuICE9PSAke2UubGVuZ3RofSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwic3RyaW5nTGVuZ3RoXCIsZXhwZWN0ZWQ6ZS5sZW5ndGgsYWN0dWFsOlwibGVuXCIsbWVzc2FnZXM6c30pfVxuXHRcdFx0fVxuXHRcdGApLGUucGF0dGVybiE9bnVsbCl7bGV0IGk9ZS5wYXR0ZXJuO3R5cGVvZiBlLnBhdHRlcm49PVwic3RyaW5nXCImJihpPW5ldyBSZWdFeHAoZS5wYXR0ZXJuLGUucGF0dGVybkZsYWdzKSksYS5wdXNoKGBcblx0XHRcdGlmICghJHtpLnRvU3RyaW5nKCl9LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdQYXR0ZXJuXCIsZXhwZWN0ZWQ6YFwiJHtpLnRvU3RyaW5nKCkucmVwbGFjZSgvXCIvZyxcIlxcXFwkJlwiKX1cImAsYWN0dWFsOlwib3JpZ1ZhbHVlXCIsbWVzc2FnZXM6c30pfVxuXHRcdFx0fVxuXHRcdGApfWlmKGUuY29udGFpbnMhPW51bGwmJmEucHVzaChgXG5cdFx0XHRpZiAodmFsdWUuaW5kZXhPZihcIiR7ZS5jb250YWluc31cIikgPT09IC0xKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdDb250YWluc1wiLGV4cGVjdGVkOidcIicrZS5jb250YWlucysnXCInLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRcdH1cblx0XHRgKSxlLmVudW0hPW51bGwpe2xldCBpPUpTT04uc3RyaW5naWZ5KGUuZW51bSk7YS5wdXNoKGBcblx0XHRcdGlmICgke2l9LmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwic3RyaW5nRW51bVwiLGV4cGVjdGVkOidcIicrZS5lbnVtLmpvaW4oXCIsIFwiKSsnXCInLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRcdH1cblx0XHRgKX1yZXR1cm4gZS5udW1lcmljPT09ITAmJmEucHVzaChgXG5cdFx0XHRpZiAoISR7WGUudG9TdHJpbmcoKX0udGVzdCh2YWx1ZSkgKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdOdW1lcmljXCIsYWN0dWFsOlwib3JpZ1ZhbHVlXCIsbWVzc2FnZXM6c30pfVxuXHRcdFx0fVxuXHRcdGApLGUuYWxwaGE9PT0hMCYmYS5wdXNoKGBcblx0XHRcdGlmKCEke0JlLnRvU3RyaW5nKCl9LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdBbHBoYVwiLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRcdH1cblx0XHRgKSxlLmFscGhhbnVtPT09ITAmJmEucHVzaChgXG5cdFx0XHRpZighJHtLZS50b1N0cmluZygpfS50ZXN0KHZhbHVlKSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwic3RyaW5nQWxwaGFudW1cIixhY3R1YWw6XCJvcmlnVmFsdWVcIixtZXNzYWdlczpzfSl9XG5cdFx0XHR9XG5cdFx0YCksZS5hbHBoYWRhc2g9PT0hMCYmYS5wdXNoKGBcblx0XHRcdGlmKCEke1dlLnRvU3RyaW5nKCl9LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdBbHBoYWRhc2hcIixhY3R1YWw6XCJvcmlnVmFsdWVcIixtZXNzYWdlczpzfSl9XG5cdFx0XHR9XG5cdFx0YCksZS5oZXg9PT0hMCYmYS5wdXNoKGBcblx0XHRcdGlmKHZhbHVlLmxlbmd0aCAlIDIgIT09IDAgfHwgISR7WWUudG9TdHJpbmcoKX0udGVzdCh2YWx1ZSkpIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInN0cmluZ0hleFwiLGFjdHVhbDpcIm9yaWdWYWx1ZVwiLG1lc3NhZ2VzOnN9KX1cblx0XHRcdH1cblx0XHRgKSxlLnNpbmdsZUxpbmU9PT0hMCYmYS5wdXNoKGBcblx0XHRcdGlmKHZhbHVlLmluY2x1ZGVzKFwiXFxcXG5cIikpIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInN0cmluZ1NpbmdsZUxpbmVcIixtZXNzYWdlczpzfSl9XG5cdFx0XHR9XG5cdFx0YCksZS5iYXNlNjQ9PT0hMCYmYS5wdXNoKGBcblx0XHRcdGlmKCEke1FlLnRvU3RyaW5nKCl9LnRlc3QodmFsdWUpKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdCYXNlNjRcIixhY3R1YWw6XCJvcmlnVmFsdWVcIixtZXNzYWdlczpzfSl9XG5cdFx0XHR9XG5cdFx0YCksYS5wdXNoKGBcblx0XHRyZXR1cm4gdmFsdWU7XG5cdGApLHtzYW5pdGl6ZWQ6dSxzb3VyY2U6YS5qb2luKGBcbmApfX19KTt2YXIgZmU9bygoUHQscGUpPT57XCJ1c2Ugc3RyaWN0XCI7cGUuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtsZXQgcj1bXTtpZih0Lml0ZW1zIT1udWxsKXtpZighQXJyYXkuaXNBcnJheSh0Lml0ZW1zKSl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgJyR7dC50eXBlfScgc2NoZW1hLiBUaGUgJ2l0ZW1zJyBmaWVsZCBtdXN0IGJlIGFuIGFycmF5LmApO2lmKHQuaXRlbXMubGVuZ3RoPT09MCl0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgJyR7dC50eXBlfScgc2NoZW1hLiBUaGUgJ2l0ZW1zJyBmaWVsZCBtdXN0IG5vdCBiZSBhbiBlbXB0eSBhcnJheS5gKX1pZihyLnB1c2goYFxuXHRcdGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJ0dXBsZVwiLGFjdHVhbDpcInZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdHZhciBsZW4gPSB2YWx1ZS5sZW5ndGg7XG5cdGApLHQuZW1wdHk9PT0hMSYmci5wdXNoKGBcblx0XHRcdGlmIChsZW4gPT09IDApIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInR1cGxlRW1wdHlcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdGApLHQuaXRlbXMhPW51bGwpe3IucHVzaChgXG5cdFx0XHRpZiAoJHt0LmVtcHR5fSAhPT0gZmFsc2UgJiYgbGVuID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGxlbiAhPT0gJHt0Lml0ZW1zLmxlbmd0aH0pIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInR1cGxlTGVuZ3RoXCIsZXhwZWN0ZWQ6dC5pdGVtcy5sZW5ndGgsYWN0dWFsOlwibGVuXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0YCksci5wdXNoKGBcblx0XHRcdHZhciBhcnIgPSB2YWx1ZTtcblx0XHRcdHZhciBwYXJlbnRGaWVsZCA9IGZpZWxkO1xuXHRcdGApO2ZvcihsZXQgYT0wO2E8dC5pdGVtcy5sZW5ndGg7YSsrKXtyLnB1c2goYFxuXHRcdFx0dmFsdWUgPSBhcnJbJHthfV07XG5cdFx0YCk7bGV0IHU9YCR7c31bJHthfV1gLGk9dGhpcy5nZXRSdWxlRnJvbVNjaGVtYSh0Lml0ZW1zW2FdKSxsPWBcblx0XHRcdGFyclske2F9XSA9ICR7bi5hc3luYz9cImF3YWl0IFwiOlwiXCJ9Y29udGV4dC5mblslJUlOREVYJSVdKGFyclske2F9XSwgKHBhcmVudEZpZWxkID8gcGFyZW50RmllbGQgOiBcIlwiKSArIFwiW1wiICsgJHthfSArIFwiXVwiLCBwYXJlbnQsIGVycm9ycywgY29udGV4dCk7XG5cdFx0YDtyLnB1c2godGhpcy5jb21waWxlUnVsZShpLG4sdSxsLGBhcnJbJHthfV1gKSl9ci5wdXNoKGBcblx0XHRyZXR1cm4gYXJyO1xuXHRgKX1lbHNlIHIucHVzaChgXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKTtyZXR1cm57c291cmNlOnIuam9pbihgXG5gKX19fSk7dmFyIGRlPW8oKE50LHllKT0+e1widXNlIHN0cmljdFwiO3ZhciBHZT0vXmh0dHBzPzpcXC9cXC9cXFMrLzt5ZS5leHBvcnRzPWZ1bmN0aW9uKHtzY2hlbWE6dCxtZXNzYWdlczplfSxzLG4pe2xldCByPVtdO3JldHVybiByLnB1c2goYFxuXHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cdGApLHQuZW1wdHk/ci5wdXNoKGBcblx0XHRcdGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHJldHVybiB2YWx1ZTtcblx0XHRgKTpyLnB1c2goYFxuXHRcdFx0aWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwidXJsRW1wdHlcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdGApLHIucHVzaChgXG5cdFx0aWYgKCEke0dlLnRvU3RyaW5nKCl9LnRlc3QodmFsdWUpKSB7XG5cdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwidXJsXCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHRgKSx7c291cmNlOnIuam9pbihgXG5gKX19fSk7dmFyIHZlPW8oKE90LGhlKT0+e1widXNlIHN0cmljdFwiO3ZhciBldD0vXihbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS02XVswLTlhLWZdezN9LVswLTlhLWZdezR9LVswLTlhLWZdezEyfXxbMF17OH0tWzBdezR9LVswXXs0fS1bMF17NH0tWzBdezEyfSkkL2k7aGUuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyl7bGV0IG49W107cmV0dXJuIG4ucHVzaChgXG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuXHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInN0cmluZ1wiLGFjdHVhbDpcInZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdHZhciB2YWwgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuXHRcdGlmICghJHtldC50b1N0cmluZygpfS50ZXN0KHZhbCkpIHtcblx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJ1dWlkXCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0Y29uc3QgdmVyc2lvbiA9IHZhbC5jaGFyQXQoMTQpIHwgMDtcblx0YCkscGFyc2VJbnQodC52ZXJzaW9uKTw3JiZuLnB1c2goYFxuXHRcdFx0aWYgKCR7dC52ZXJzaW9ufSAhPT0gdmVyc2lvbikge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwidXVpZFZlcnNpb25cIixleHBlY3RlZDp0LnZlcnNpb24sYWN0dWFsOlwidmVyc2lvblwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXHRcdGApLG4ucHVzaChgXG5cdFx0c3dpdGNoICh2ZXJzaW9uKSB7XG5cdFx0Y2FzZSAwOlxuXHRcdGNhc2UgMTpcblx0XHRjYXNlIDI6XG5cdFx0Y2FzZSA2OlxuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAzOlxuXHRcdGNhc2UgNDpcblx0XHRjYXNlIDU6XG5cdFx0XHRpZiAoW1wiOFwiLCBcIjlcIiwgXCJhXCIsIFwiYlwiXS5pbmRleE9mKHZhbC5jaGFyQXQoMTkpKSA9PT0gLTEpIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInV1aWRcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdGApLHtzb3VyY2U6bi5qb2luKGBcbmApfX19KTt2YXIgYmU9bygoUnQsbWUpPT57XCJ1c2Ugc3RyaWN0XCI7dmFyIHR0PS9eKCgoW2EtZjAtOV1bYS1mMC05XStbLV0pezV9fChbYS1mMC05XVthLWYwLTldK1s6XSl7NX0pKFthLWYwLTldW2EtZjAtOV0pJCl8KF4oW2EtZjAtOV1bYS1mMC05XVthLWYwLTldW2EtZjAtOV0rWy5dKXsyfShbYS1mMC05XVthLWYwLTldW2EtZjAtOV1bYS1mMC05XSkpJC9pO21lLmV4cG9ydHM9ZnVuY3Rpb24oe3NjaGVtYTp0LG1lc3NhZ2VzOmV9LHMsbil7cmV0dXJue3NvdXJjZTpgXG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdCR7dGhpcy5tYWtlRXJyb3Ioe3R5cGU6XCJzdHJpbmdcIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdiA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZiAoISR7dHQudG9TdHJpbmcoKX0udGVzdCh2KSkge1xuXHRcdFx0XHQke3RoaXMubWFrZUVycm9yKHt0eXBlOlwibWFjXCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplfSl9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRgfX19KTt2YXIgRWU9bygoRnQsZ2UpPT57XCJ1c2Ugc3RyaWN0XCI7Z2UuZXhwb3J0cz1mdW5jdGlvbih7c2NoZW1hOnQsbWVzc2FnZXM6ZX0scyxuKXtyZXR1cm57c291cmNlOmBcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcInN0cmluZ1wiLGFjdHVhbDpcInZhbHVlXCIsbWVzc2FnZXM6ZX0pfVxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgIT09IFwic3RyaW5nXCIpXG5cdFx0XHRcdHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcblxuXHRcdFx0dmFsID0gdmFsdWUucmVwbGFjZSgvXFxcXEQrL2csIFwiXCIpO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbMCwgMiwgNCwgNiwgOCwgMSwgMywgNSwgNywgOV07XG5cdFx0XHR2YXIgbGVuID0gdmFsID8gdmFsLmxlbmd0aCA6IDAsXG5cdFx0XHRcdGJpdCA9IDEsXG5cdFx0XHRcdHN1bSA9IDA7XG5cdFx0XHR3aGlsZSAobGVuLS0pIHtcblx0XHRcdFx0c3VtICs9ICEoYml0IF49IDEpID8gcGFyc2VJbnQodmFsW2xlbl0sIDEwKSA6IGFycmF5W3ZhbFtsZW5dXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCEoc3VtICUgMTAgPT09IDAgJiYgc3VtID4gMCkpIHtcblx0XHRcdFx0JHt0aGlzLm1ha2VFcnJvcih7dHlwZTpcImx1aG5cIixhY3R1YWw6XCJ2YWx1ZVwiLG1lc3NhZ2VzOmV9KX1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdGB9fX0pO3ZhciBfZT1vKChxdCxBZSk9PntcInVzZSBzdHJpY3RcIjt2YXIgbSwkZSxiLHhlLHJ0PVwicHJldHRpZXJcIixzdD1cImNsaS1oaWdobGlnaHRcIjtBZS5leHBvcnRzPWZ1bmN0aW9uKHQpe218fChtPWgocnQpLCRlPXtwYXJzZXI6XCJiYWJlbFwiLHVzZVRhYnM6ITEscHJpbnRXaWR0aDoxMjAsdHJhaWxpbmdDb21tYTpcIm5vbmVcIix0YWJXaWR0aDo0LHNpbmdsZVF1b3RlOiExLHNlbWk6ITAsYnJhY2tldFNwYWNpbmc6ITB9LGI9aChzdCkseGU9e2xhbmd1YWdlOlwianNcIix0aGVtZTpiLmZyb21Kc29uKHtrZXl3b3JkOltcIndoaXRlXCIsXCJib2xkXCJdLGJ1aWx0X2luOlwibWFnZW50YVwiLGxpdGVyYWw6XCJjeWFuXCIsbnVtYmVyOlwibWFnZW50YVwiLHJlZ2V4cDpcInJlZFwiLHN0cmluZzpbXCJ5ZWxsb3dcIixcImJvbGRcIl0sc3ltYm9sOlwicGxhaW5cIixjbGFzczpcImJsdWVcIixhdHRyOlwicGxhaW5cIixmdW5jdGlvbjpbXCJ3aGl0ZVwiLFwiYm9sZFwiXSx0aXRsZTpcInBsYWluXCIscGFyYW1zOlwiZ3JlZW5cIixjb21tZW50OlwiZ3JleVwifSl9KTtsZXQgZT1tLmZvcm1hdCh0LCRlKTtyZXR1cm4gYi5oaWdobGlnaHQoZSx4ZSl9fSk7dmFyIEllPW8oKHp0LGtlKT0+e1widXNlIHN0cmljdFwiO3ZhciBkO3RyeXtkPW5ldyBGdW5jdGlvbihcInJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoYXN5bmMgZnVuY3Rpb24oKXt9KS5jb25zdHJ1Y3RvclwiKSgpfWNhdGNoe312YXIgeT1fKCksYXQ9SSgpO2Z1bmN0aW9uIG50KCl7cmV0dXJuIE9iamVjdC5hc3NpZ24oe30saigpKX1mdW5jdGlvbiB1dCgpe3JldHVybnthbnk6UygpLGFycmF5Ok4oKSxib29sZWFuOlIoKSxjbGFzczpxKCksY3VzdG9tOnooKSxjdXJyZW5jeTpNKCksZGF0ZTpMKCksZW1haWw6SCgpLGVudW06WigpLGVxdWFsOkIoKSxmb3JiaWRkZW46VygpLGZ1bmN0aW9uOlEoKSxtdWx0aTplZSgpLG51bWJlcjpyZSgpLG9iamVjdDphZSgpLG9iamVjdElEOnVlKCkscmVjb3JkOmllKCksc3RyaW5nOmNlKCksdHVwbGU6ZmUoKSx1cmw6ZGUoKSx1dWlkOnZlKCksbWFjOmJlKCksbHVobjpFZSgpfX12YXIgZz1jbGFzc3tjb25zdHJ1Y3RvcihlKXtpZih0aGlzLm9wdHM9e30sdGhpcy5kZWZhdWx0cz17fSx0aGlzLm1lc3NhZ2VzPW50KCksdGhpcy5ydWxlcz11dCgpLHRoaXMuYWxpYXNlcz17fSx0aGlzLmNhY2hlPW5ldyBNYXAsZSl7aWYoeSh0aGlzLm9wdHMsZSksZS5kZWZhdWx0cyYmeSh0aGlzLmRlZmF1bHRzLGUuZGVmYXVsdHMpLGUubWVzc2FnZXMpZm9yKGxldCBzIGluIGUubWVzc2FnZXMpdGhpcy5hZGRNZXNzYWdlKHMsZS5tZXNzYWdlc1tzXSk7aWYoZS5hbGlhc2VzKWZvcihsZXQgcyBpbiBlLmFsaWFzZXMpdGhpcy5hbGlhcyhzLGUuYWxpYXNlc1tzXSk7aWYoZS5jdXN0b21SdWxlcylmb3IobGV0IHMgaW4gZS5jdXN0b21SdWxlcyl0aGlzLmFkZChzLGUuY3VzdG9tUnVsZXNbc10pO2lmKGUucGx1Z2lucyl7bGV0IHM9ZS5wbHVnaW5zO2lmKCFBcnJheS5pc0FycmF5KHMpKXRocm93IG5ldyBFcnJvcihcIlBsdWdpbnMgdHlwZSBtdXN0IGJlIGFycmF5XCIpO3MuZm9yRWFjaCh0aGlzLnBsdWdpbi5iaW5kKHRoaXMpKX1pZih0aGlzLm9wdHMuZGVidWcpe2xldCBzPWZ1bmN0aW9uKG4pe3JldHVybiBufTt0eXBlb2Ygd2luZG93PlwidVwiJiYocz1fZSgpKSx0aGlzLl9mb3JtYXR0ZXI9c319fXZhbGlkYXRlKGUscyl7cmV0dXJuIHRoaXMuY29tcGlsZShzKShlKX13cmFwUmVxdWlyZWRDaGVja1NvdXJjZUNvZGUoZSxzLG4scil7bGV0IGE9W10se2NvbnNpZGVyTnVsbEFzQVZhbHVlOnU9ITF9PXRoaXMub3B0cyxpLGw9ZS5zY2hlbWEub3B0aW9uYWw9PT0hMHx8ZS5zY2hlbWEudHlwZT09PVwiZm9yYmlkZGVuXCIsYz11P2Uuc2NoZW1hLm51bGxhYmxlIT09ITF8fGUuc2NoZW1hLnR5cGU9PT1cImZvcmJpZGRlblwiOmUuc2NoZW1hLm9wdGlvbmFsPT09ITB8fGUuc2NoZW1hLm51bGxhYmxlPT09ITB8fGUuc2NoZW1hLnR5cGU9PT1cImZvcmJpZGRlblwiO2lmKHU/ZS5zY2hlbWEuZGVmYXVsdCE9bnVsbCYmZS5zY2hlbWEuZGVmYXVsdCE9bnVsbDplLnNjaGVtYS5kZWZhdWx0IT1udWxsKXtsPSExLHU/ZS5zY2hlbWEubnVsbGFibGU9PT0hMSYmKGM9ITEpOmUuc2NoZW1hLm51bGxhYmxlIT09ITAmJihjPSExKTtsZXQgZjt0eXBlb2YgZS5zY2hlbWEuZGVmYXVsdD09XCJmdW5jdGlvblwiPyhuLmN1c3RvbXNbZS5pbmRleF18fChuLmN1c3RvbXNbZS5pbmRleF09e30pLG4uY3VzdG9tc1tlLmluZGV4XS5kZWZhdWx0Rm49ZS5zY2hlbWEuZGVmYXVsdCxmPWBjb250ZXh0LmN1c3RvbXNbJHtlLmluZGV4fV0uZGVmYXVsdEZuLmNhbGwodGhpcywgY29udGV4dC5ydWxlc1ske2UuaW5kZXh9XS5zY2hlbWEsIGZpZWxkLCBwYXJlbnQsIGNvbnRleHQpYCk6Zj1KU09OLnN0cmluZ2lmeShlLnNjaGVtYS5kZWZhdWx0KSxpPWBcblx0XHRcdFx0dmFsdWUgPSAke2Z9O1xuXHRcdFx0XHQke3J9ID0gdmFsdWU7XG5cdFx0XHRgfWVsc2UgaT10aGlzLm1ha2VFcnJvcih7dHlwZTpcInJlcXVpcmVkXCIsYWN0dWFsOlwidmFsdWVcIixtZXNzYWdlczplLm1lc3NhZ2VzfSk7cmV0dXJuIGEucHVzaChgXG5cdFx0XHQke2BpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgeyAke2w/YFxuLy8gYWxsb3cgdW5kZWZpbmVkXG5gOml9IH1gfVxuXHRcdFx0JHtgZWxzZSBpZiAodmFsdWUgPT09IG51bGwpIHsgJHtjP2Bcbi8vIGFsbG93IG51bGxcbmA6aX0gfWB9XG5cdFx0XHQke3M/YGVsc2UgeyAke3N9IH1gOlwiXCJ9XG5cdFx0YCksYS5qb2luKGBcbmApfWNvbXBpbGUoZSl7aWYoZT09PW51bGx8fHR5cGVvZiBlIT1cIm9iamVjdFwiKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2NoZW1hLlwiKTtsZXQgcz10aGlzLG49e2luZGV4OjAsYXN5bmM6ZS4kJGFzeW5jPT09ITAscnVsZXM6W10sZm46W10sY3VzdG9tczp7fSx1dGlsczp7cmVwbGFjZTphdH19O2lmKHRoaXMuY2FjaGUuY2xlYXIoKSxkZWxldGUgZS4kJGFzeW5jLG4uYXN5bmMmJiFkKXRocm93IG5ldyBFcnJvcihcIkFzeW5jaHJvbm91cyBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQuXCIpO2lmKGUuJCRyb290IT09ITApaWYoQXJyYXkuaXNBcnJheShlKSllPXRoaXMuZ2V0UnVsZUZyb21TY2hlbWEoZSkuc2NoZW1hO2Vsc2V7bGV0IHA9T2JqZWN0LmFzc2lnbih7fSxlKTtlPXt0eXBlOlwib2JqZWN0XCIsc3RyaWN0OnAuJCRzdHJpY3QscHJvcGVydGllczpwfSxkZWxldGUgcC4kJHN0cmljdH1sZXQgcj1bXCJ2YXIgZXJyb3JzID0gW107XCIsXCJ2YXIgZmllbGQ7XCIsXCJ2YXIgcGFyZW50ID0gbnVsbDtcIixgdmFyIGxhYmVsID0gJHtlLmxhYmVsPydcIicrZS5sYWJlbCsnXCInOlwibnVsbFwifTtgXSxhPXRoaXMuZ2V0UnVsZUZyb21TY2hlbWEoZSk7ci5wdXNoKHRoaXMuY29tcGlsZVJ1bGUoYSxuLG51bGwsYCR7bi5hc3luYz9cImF3YWl0IFwiOlwiXCJ9Y29udGV4dC5mblslJUlOREVYJSVdKHZhbHVlLCBmaWVsZCwgbnVsbCwgZXJyb3JzLCBjb250ZXh0LCBsYWJlbCk7YCxcInZhbHVlXCIpKSxyLnB1c2goXCJpZiAoZXJyb3JzLmxlbmd0aCkge1wiKSxyLnB1c2goYFxuXHRcdFx0cmV0dXJuIGVycm9ycy5tYXAoZXJyID0+IHtcblx0XHRcdFx0aWYgKGVyci5tZXNzYWdlKSB7XG5cdFx0XHRcdFx0ZXJyLm1lc3NhZ2UgPSBjb250ZXh0LnV0aWxzLnJlcGxhY2UoZXJyLm1lc3NhZ2UsIC9cXFxce2ZpZWxkXFxcXH0vZywgZXJyLmxhYmVsIHx8IGVyci5maWVsZCk7XG5cdFx0XHRcdFx0ZXJyLm1lc3NhZ2UgPSBjb250ZXh0LnV0aWxzLnJlcGxhY2UoZXJyLm1lc3NhZ2UsIC9cXFxce2V4cGVjdGVkXFxcXH0vZywgZXJyLmV4cGVjdGVkKTtcblx0XHRcdFx0XHRlcnIubWVzc2FnZSA9IGNvbnRleHQudXRpbHMucmVwbGFjZShlcnIubWVzc2FnZSwgL1xcXFx7YWN0dWFsXFxcXH0vZywgZXJyLmFjdHVhbCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoIWVyci5sYWJlbCkgZGVsZXRlIGVyci5sYWJlbFxuXHRcdFx0XHRyZXR1cm4gZXJyO1xuXHRcdFx0fSk7XG5cdFx0YCksci5wdXNoKFwifVwiKSxyLnB1c2goXCJyZXR1cm4gdHJ1ZTtcIik7bGV0IHU9ci5qb2luKGBcbmApLGk9bi5hc3luYz9kOkZ1bmN0aW9uLGw9bmV3IGkoXCJ2YWx1ZVwiLFwiY29udGV4dFwiLHUpO3RoaXMub3B0cy5kZWJ1ZyYmY29uc29sZS5sb2codGhpcy5fZm9ybWF0dGVyKGAvLyBNYWluIGNoZWNrIGZ1bmN0aW9uXG5gK2wudG9TdHJpbmcoKSkpLHRoaXMuY2FjaGUuY2xlYXIoKTtsZXQgYz1mdW5jdGlvbihwLGYpe3JldHVybiBuLmRhdGE9cCxmJiZmLm1ldGEmJihuLm1ldGE9Zi5tZXRhKSxsLmNhbGwocyxwLG4pfTtyZXR1cm4gYy5hc3luYz1uLmFzeW5jLGN9Y29tcGlsZVJ1bGUoZSxzLG4scixhKXtsZXQgdT1bXSxpPXRoaXMuY2FjaGUuZ2V0KGUuc2NoZW1hKTtpZihpKWU9aSxlLmN5Y2xlPSEwLGUuY3ljbGVTdGFjaz1bXSx1LnB1c2godGhpcy53cmFwUmVxdWlyZWRDaGVja1NvdXJjZUNvZGUoZSxgXG5cdFx0XHRcdHZhciBydWxlID0gY29udGV4dC5ydWxlc1ske2UuaW5kZXh9XTtcblx0XHRcdFx0aWYgKHJ1bGUuY3ljbGVTdGFjay5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRydWxlLmN5Y2xlU3RhY2sucHVzaCh2YWx1ZSk7XG5cdFx0XHRcdFx0JHtyLnJlcGxhY2UoLyUlSU5ERVglJS9nLGUuaW5kZXgpfVxuXHRcdFx0XHRcdHJ1bGUuY3ljbGVTdGFjay5wb3AodmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRgLHMsYSkpO2Vsc2V7dGhpcy5jYWNoZS5zZXQoZS5zY2hlbWEsZSksZS5pbmRleD1zLmluZGV4LHMucnVsZXNbcy5pbmRleF09ZTtsZXQgbD1uPz9cIiQkcm9vdFwiO3MuaW5kZXgrKztsZXQgYz1lLnJ1bGVGdW5jdGlvbi5jYWxsKHRoaXMsZSxuLHMpO2Muc291cmNlPWMuc291cmNlLnJlcGxhY2UoLyUlSU5ERVglJS9nLGUuaW5kZXgpO2xldCBwPXMuYXN5bmM/ZDpGdW5jdGlvbixmPW5ldyBwKFwidmFsdWVcIixcImZpZWxkXCIsXCJwYXJlbnRcIixcImVycm9yc1wiLFwiY29udGV4dFwiLFwibGFiZWxcIixjLnNvdXJjZSk7cy5mbltlLmluZGV4XT1mLmJpbmQodGhpcyksdS5wdXNoKHRoaXMud3JhcFJlcXVpcmVkQ2hlY2tTb3VyY2VDb2RlKGUsci5yZXBsYWNlKC8lJUlOREVYJSUvZyxlLmluZGV4KSxzLGEpKSx1LnB1c2godGhpcy5tYWtlQ3VzdG9tVmFsaWRhdG9yKHt2TmFtZTphLHBhdGg6bCxzY2hlbWE6ZS5zY2hlbWEsY29udGV4dDpzLG1lc3NhZ2VzOmUubWVzc2FnZXMscnVsZUluZGV4OmUuaW5kZXh9KSksdGhpcy5vcHRzLmRlYnVnJiZjb25zb2xlLmxvZyh0aGlzLl9mb3JtYXR0ZXIoYC8vIENvbnRleHQuZm5bJHtlLmluZGV4fV1cbmArZi50b1N0cmluZygpKSl9cmV0dXJuIHUuam9pbihgXG5gKX1nZXRSdWxlRnJvbVNjaGVtYShlKXtlPXRoaXMucmVzb2x2ZVR5cGUoZSk7bGV0IHM9dGhpcy5hbGlhc2VzW2UudHlwZV07cyYmKGRlbGV0ZSBlLnR5cGUsZT15KGUscyx7c2tpcElmRXhpc3Q6ITB9KSk7bGV0IG49dGhpcy5ydWxlc1tlLnR5cGVdO2lmKCFuKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgJ1wiK2UudHlwZStcIicgdHlwZSBpbiB2YWxpZGF0b3Igc2NoZW1hLlwiKTtyZXR1cm57bWVzc2FnZXM6T2JqZWN0LmFzc2lnbih7fSx0aGlzLm1lc3NhZ2VzLGUubWVzc2FnZXMpLHNjaGVtYTp5KGUsdGhpcy5kZWZhdWx0c1tlLnR5cGVdLHtza2lwSWZFeGlzdDohMH0pLHJ1bGVGdW5jdGlvbjpufX1wYXJzZVNob3J0SGFuZChlKXtsZXQgcz1lLnNwbGl0KFwifFwiKS5tYXAoYT0+YS50cmltKCkpLG49c1swXSxyO3JldHVybiBuLmVuZHNXaXRoKFwiW11cIik/cj10aGlzLmdldFJ1bGVGcm9tU2NoZW1hKHt0eXBlOlwiYXJyYXlcIixpdGVtczpuLnNsaWNlKDAsLTIpfSkuc2NoZW1hOnI9e3R5cGU6c1swXX0scy5zbGljZSgxKS5tYXAoYT0+e2xldCB1PWEuaW5kZXhPZihcIjpcIik7aWYodSE9PS0xKXtsZXQgaT1hLnN1YnN0cigwLHUpLnRyaW0oKSxsPWEuc3Vic3RyKHUrMSkudHJpbSgpO2w9PT1cInRydWVcInx8bD09PVwiZmFsc2VcIj9sPWw9PT1cInRydWVcIjpOdW1iZXIuaXNOYU4oTnVtYmVyKGwpKXx8KGw9TnVtYmVyKGwpKSxyW2ldPWx9ZWxzZSBhLnN0YXJ0c1dpdGgoXCJuby1cIik/clthLnNsaWNlKDMpXT0hMTpyW2FdPSEwfSkscn1tYWtlRXJyb3Ioe3R5cGU6ZSxmaWVsZDpzLGV4cGVjdGVkOm4sYWN0dWFsOnIsbWVzc2FnZXM6YX0pe2xldCB1PXt0eXBlOmBcIiR7ZX1cImAsbWVzc2FnZTpgXCIke2FbZV19XCJgfTtyZXR1cm4gcz91LmZpZWxkPWBcIiR7c31cImA6dS5maWVsZD1cImZpZWxkXCIsbiE9bnVsbCYmKHUuZXhwZWN0ZWQ9biksciE9bnVsbCYmKHUuYWN0dWFsPXIpLHUubGFiZWw9XCJsYWJlbFwiLGBlcnJvcnMucHVzaCh7ICR7T2JqZWN0LmtleXModSkubWFwKGw9PmAke2x9OiAke3VbbF19YCkuam9pbihcIiwgXCIpfSB9KTtgfW1ha2VDdXN0b21WYWxpZGF0b3Ioe3ZOYW1lOmU9XCJ2YWx1ZVwiLGZuTmFtZTpzPVwiY3VzdG9tXCIscnVsZUluZGV4Om4scGF0aDpyLHNjaGVtYTphLGNvbnRleHQ6dSxtZXNzYWdlczppfSl7bGV0IGw9XCJydWxlXCIrbixjPVwiZm5DdXN0b21FcnJvcnNcIituO2lmKHR5cGVvZiBhW3NdPT1cImZ1bmN0aW9uXCIpe2lmKHUuY3VzdG9tc1tuXT8odS5jdXN0b21zW25dLm1lc3NhZ2VzPWksdS5jdXN0b21zW25dLnNjaGVtYT1hKTp1LmN1c3RvbXNbbl09e21lc3NhZ2VzOmksc2NoZW1hOmF9LHRoaXMub3B0cy51c2VOZXdDdXN0b21DaGVja2VyRnVuY3Rpb24pcmV0dXJuYFxuICAgICAgICAgICAgICAgXHRcdGNvbnN0ICR7bH0gPSBjb250ZXh0LmN1c3RvbXNbJHtufV07XG5cdFx0XHRcdFx0Y29uc3QgJHtjfSA9IFtdO1xuXHRcdFx0XHRcdCR7ZX0gPSAke3UuYXN5bmM/XCJhd2FpdCBcIjpcIlwifSR7bH0uc2NoZW1hLiR7c30uY2FsbCh0aGlzLCAke2V9LCAke2N9ICwgJHtsfS5zY2hlbWEsIFwiJHtyfVwiLCBwYXJlbnQsIGNvbnRleHQpO1xuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KCR7Y30gKSkge1xuICAgICAgICAgICAgICAgICAgXHRcdCR7Y30gLmZvckVhY2goZXJyID0+IGVycm9ycy5wdXNoKE9iamVjdC5hc3NpZ24oeyBtZXNzYWdlOiAke2x9Lm1lc3NhZ2VzW2Vyci50eXBlXSwgZmllbGQgfSwgZXJyKSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0YDtsZXQgcD1cInJlc19cIitsO3JldHVybmBcblx0XHRcdFx0Y29uc3QgJHtsfSA9IGNvbnRleHQuY3VzdG9tc1ske259XTtcblx0XHRcdFx0Y29uc3QgJHtwfSA9ICR7dS5hc3luYz9cImF3YWl0IFwiOlwiXCJ9JHtsfS5zY2hlbWEuJHtzfS5jYWxsKHRoaXMsICR7ZX0sICR7bH0uc2NoZW1hLCBcIiR7cn1cIiwgcGFyZW50LCBjb250ZXh0KTtcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoJHtwfSkpIHtcblx0XHRcdFx0XHQke3B9LmZvckVhY2goZXJyID0+IGVycm9ycy5wdXNoKE9iamVjdC5hc3NpZ24oeyBtZXNzYWdlOiAke2x9Lm1lc3NhZ2VzW2Vyci50eXBlXSwgZmllbGQgfSwgZXJyKSkpO1xuXHRcdFx0XHR9XG5cdFx0YH1yZXR1cm5cIlwifWFkZChlLHMpe3RoaXMucnVsZXNbZV09c31hZGRNZXNzYWdlKGUscyl7dGhpcy5tZXNzYWdlc1tlXT1zfWFsaWFzKGUscyl7aWYodGhpcy5ydWxlc1tlXSl0aHJvdyBuZXcgRXJyb3IoXCJBbGlhcyBuYW1lIG11c3Qgbm90IGJlIGEgcnVsZSBuYW1lXCIpO3RoaXMuYWxpYXNlc1tlXT1zfXBsdWdpbihlKXtpZih0eXBlb2YgZSE9XCJmdW5jdGlvblwiKXRocm93IG5ldyBFcnJvcihcIlBsdWdpbiBmbiB0eXBlIG11c3QgYmUgZnVuY3Rpb25cIik7cmV0dXJuIGUodGhpcyl9cmVzb2x2ZVR5cGUoZSl7aWYodHlwZW9mIGU9PVwic3RyaW5nXCIpZT10aGlzLnBhcnNlU2hvcnRIYW5kKGUpO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShlKSl7aWYoZS5sZW5ndGg9PT0wKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc2NoZW1hLlwiKTtlPXt0eXBlOlwibXVsdGlcIixydWxlczplfSxlLnJ1bGVzLm1hcChhPT50aGlzLmdldFJ1bGVGcm9tU2NoZW1hKGEpKS5ldmVyeShhPT5hLnNjaGVtYS5vcHRpb25hbD09PSEwKSYmKGUub3B0aW9uYWw9ITApO2xldCBuPSF0aGlzLm9wdHMuY29uc2lkZXJOdWxsQXNBVmFsdWU7ZS5ydWxlcy5tYXAoYT0+dGhpcy5nZXRSdWxlRnJvbVNjaGVtYShhKSkuZXZlcnkoYT0+YS5zY2hlbWEubnVsbGFibGU9PT1uKSYmKGUubnVsbGFibGU9bil9aWYoZS4kJHR5cGUpe2xldCBzPWUuJCR0eXBlLG49dGhpcy5nZXRSdWxlRnJvbVNjaGVtYShzKS5zY2hlbWE7ZGVsZXRlIGUuJCR0eXBlO2xldCByPU9iamVjdC5hc3NpZ24oe30sZSk7Zm9yKGxldCBhIGluIGUpZGVsZXRlIGVbYV07eShlLG4se3NraXBJZkV4aXN0OiEwfSksZS5wcm9wcz1yfXJldHVybiBlfW5vcm1hbGl6ZShlKXtsZXQgcz10aGlzLnJlc29sdmVUeXBlKGUpO2lmKHRoaXMuYWxpYXNlc1tzLnR5cGVdJiYocz15KHMsdGhpcy5ub3JtYWxpemUodGhpcy5hbGlhc2VzW3MudHlwZV0pLHtza2lwSWZFeGlzdHM6ITB9KSkscz15KHMsdGhpcy5kZWZhdWx0c1tzLnR5cGVdLHtza2lwSWZFeGlzdDohMH0pLHMudHlwZT09PVwibXVsdGlcIilyZXR1cm4gcy5ydWxlcz1zLnJ1bGVzLm1hcChuPT50aGlzLm5vcm1hbGl6ZShuKSkscy5vcHRpb25hbD1zLnJ1bGVzLmV2ZXJ5KG49Pm4ub3B0aW9uYWw9PT0hMCkscztpZihzLnR5cGU9PT1cImFycmF5XCIpcmV0dXJuIHMuaXRlbXM9dGhpcy5ub3JtYWxpemUocy5pdGVtcykscztpZihzLnR5cGU9PT1cIm9iamVjdFwiJiZzLnByb3BzJiZPYmplY3QuZW50cmllcyhzLnByb3BzKS5mb3JFYWNoKChbbixyXSk9PnMucHJvcHNbbl09dGhpcy5ub3JtYWxpemUocikpLHR5cGVvZiBlPT1cIm9iamVjdFwiKWlmKGUudHlwZSl7bGV0IG49dGhpcy5ub3JtYWxpemUoZS50eXBlKTt5KHMsbix7c2tpcElmRXhpc3RzOiEwfSl9ZWxzZSBPYmplY3QuZW50cmllcyhlKS5mb3JFYWNoKChbbixyXSk9PnNbbl09dGhpcy5ub3JtYWxpemUocikpO3JldHVybiBzfX07a2UuZXhwb3J0cz1nfSk7dmFyIGplPW8oKEN0LHdlKT0+e1widXNlIHN0cmljdFwiO3dlLmV4cG9ydHM9SWUoKX0pO2Z1bmN0aW9uIFRlKHQpe2xldCBlPWplKCksbj1uZXcgZSgpLmNvbXBpbGUodCk7cmV0dXJue3ZhbGlkYXRlKHIpe2xldCBhPW4ocik7aWYoQXJyYXkuaXNBcnJheShhKSl0aHJvdyBuZXcgRXJyb3IoXCJWYWxpZGF0aW9uIGZhaWxlZFwiLHtjYXVzZTphfSk7cmV0dXJuIGF9fX1mdW5jdGlvbiBTZSh0KXtyZXR1cm57dmFsaWRhdGUoZSl7bGV0e2Vycm9yOnMsd2FybmluZzpufT10LnZhbGlkYXRlKGUpO2lmKHMpdGhyb3cgcztpZihuKXRocm93IG47cmV0dXJuITB9fX1mdW5jdGlvbiBQZSh0KXtyZXR1cm57dmFsaWRhdGU6ZT0+dC52YWxpZGF0ZVN5bmMoZSl9fWZ1bmN0aW9uIE5lKHQpe3JldHVybnt2YWxpZGF0ZTplPT50LnBhcnNlKGUpfX12YXIgbHQ9Y2xhc3MgZXh0ZW5kcyBFcnJvcntpc3N1ZXM7Y29uc3RydWN0b3IodCl7c3VwZXIodFswXS5tZXNzYWdlKSx0aGlzLm5hbWU9XCJWYWxpRXJyb3JcIix0aGlzLmlzc3Vlcz10fX0sSHQ9U3ltYm9sKFwiYnJhbmRcIik7ZnVuY3Rpb24gT2UodCxlLHMpe2xldCBuPXQuX3BhcnNlKGUscyk7aWYobi5pc3N1ZXMpdGhyb3cgbmV3IGx0KG4uaXNzdWVzKTtyZXR1cm4gbi5vdXRwdXR9ZnVuY3Rpb24gUmUodCl7cmV0dXJue3ZhbGlkYXRlKGUpe3JldHVybiBPZSh0LGUpfX19ZnVuY3Rpb24gRmUodCxlKXtzd2l0Y2godCl7Y2FzZVwiWXVwXCI6cmV0dXJuIFBlKGUpO2Nhc2VcIkZhc3Rlc3RWYWxpZGF0b3JcIjpyZXR1cm4gVGUoZSk7Y2FzZVwiSm9pXCI6cmV0dXJuIFNlKGUpO2Nhc2VcIlpvZFwiOnJldHVybiBOZShlKTtjYXNlXCJWYWxpYm90XCI6cmV0dXJuIFJlKGUpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKGBEb2VzIG5vdCBzdXBwb3J0ICR7dH0gdmFsaWRhdGlvbiB5ZXQhYCl9fWZ1bmN0aW9uIHJyKHt0eXBlOnQsc2NoZW1hOmUsbW9kZTpzPVwicXVlcnlcIn0pe3JldHVybiBpdChbe3R5cGU6dCxzY2hlbWE6ZSxtb2RlOnN9XSl9ZnVuY3Rpb24gaXQodCl7cmV0dXJuIGU9PmFzeW5jKHMsbixyKT0+e3RyeXtpZih0LmZvckVhY2goYT0+e0ZlKGEudHlwZSxhLnNjaGVtYSkudmFsaWRhdGUoc1thLm1vZGU/P1wicXVlcnlcIl0pfSkscil7cigpO3JldHVybn1pZihlKXJldHVybiBlKHMsbik7bi5zdGF0dXMoNDA0KS5lbmQoKX1jYXRjaChhKXtuLnN0YXR1cyg0MDApLnNlbmQoYSl9fX1leHBvcnR7cnIgYXMgd2l0aFZhbGlkYXRpb24saXQgYXMgd2l0aFZhbGlkYXRpb25zfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6WyJoIiwidCIsInJlcXVpcmUiLCJQcm94eSIsImdldCIsImUiLCJzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJFcnJvciIsIm8iLCJleHBvcnRzIiwiXyIsImN0IiwiQSIsIkNlIiwiQXJyYXkiLCJpc0FycmF5IiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsIngiLCJuIiwic2tpcElmRXhpc3QiLCJJIiwicHQiLCJrIiwiTWUiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJqIiwiZnQiLCJ3IiwicmVxdWlyZWQiLCJzdHJpbmciLCJzdHJpbmdFbXB0eSIsInN0cmluZ01pbiIsInN0cmluZ01heCIsInN0cmluZ0xlbmd0aCIsInN0cmluZ1BhdHRlcm4iLCJzdHJpbmdDb250YWlucyIsInN0cmluZ0VudW0iLCJzdHJpbmdOdW1lcmljIiwic3RyaW5nQWxwaGEiLCJzdHJpbmdBbHBoYW51bSIsInN0cmluZ0FscGhhZGFzaCIsInN0cmluZ0hleCIsInN0cmluZ1NpbmdsZUxpbmUiLCJzdHJpbmdCYXNlNjQiLCJudW1iZXIiLCJudW1iZXJNaW4iLCJudW1iZXJNYXgiLCJudW1iZXJFcXVhbCIsIm51bWJlck5vdEVxdWFsIiwibnVtYmVySW50ZWdlciIsIm51bWJlclBvc2l0aXZlIiwibnVtYmVyTmVnYXRpdmUiLCJhcnJheSIsImFycmF5RW1wdHkiLCJhcnJheU1pbiIsImFycmF5TWF4IiwiYXJyYXlMZW5ndGgiLCJhcnJheUNvbnRhaW5zIiwiYXJyYXlVbmlxdWUiLCJhcnJheUVudW0iLCJ0dXBsZSIsInR1cGxlRW1wdHkiLCJ0dXBsZUxlbmd0aCIsImJvb2xlYW4iLCJjdXJyZW5jeSIsImRhdGUiLCJkYXRlTWluIiwiZGF0ZU1heCIsImVudW1WYWx1ZSIsImVxdWFsVmFsdWUiLCJlcXVhbEZpZWxkIiwiZm9yYmlkZGVuIiwiZnVuY3Rpb24iLCJlbWFpbCIsImVtYWlsRW1wdHkiLCJlbWFpbE1pbiIsImVtYWlsTWF4IiwibHVobiIsIm1hYyIsIm9iamVjdCIsIm9iamVjdFN0cmljdCIsIm9iamVjdE1pblByb3BzIiwib2JqZWN0TWF4UHJvcHMiLCJ1cmwiLCJ1cmxFbXB0eSIsInV1aWQiLCJ1dWlkVmVyc2lvbiIsImNsYXNzSW5zdGFuY2VPZiIsIm9iamVjdElEIiwicmVjb3JkIiwiUyIsInl0IiwiVCIsInB1c2giLCJzb3VyY2UiLCJqb2luIiwiTiIsImR0IiwiUCIsInNjaGVtYSIsIm1lc3NhZ2VzIiwiciIsImEiLCJjb252ZXJ0IiwibWFrZUVycm9yIiwidHlwZSIsImFjdHVhbCIsImVtcHR5IiwibWluIiwiZXhwZWN0ZWQiLCJtYXgiLCJjb250YWlucyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmlxdWUiLCJlbnVtIiwidSIsIml0ZW1zIiwiaSIsImdldFJ1bGVGcm9tU2NoZW1hIiwibCIsImFzeW5jIiwiY29tcGlsZVJ1bGUiLCJzYW5pdGl6ZWQiLCJSIiwiaHQiLCJPIiwicSIsInZ0IiwiRiIsImluZGV4IiwiaW5zdGFuY2VPZiIsIm5hbWUiLCJjdXN0b21zIiwieiIsIm10IiwiViIsIm1ha2VDdXN0b21WYWxpZGF0b3IiLCJmbk5hbWUiLCJwYXRoIiwiY29udGV4dCIsInJ1bGVJbmRleCIsIk0iLCJidCIsIkMiLCJEZSIsImN1cnJlbmN5U3ltYm9sIiwidGhvdXNhbmRTZXBhcmF0b3IiLCJkZWNpbWFsU2VwYXJhdG9yIiwiY3VzdG9tUmVnZXgiLCJzeW1ib2xPcHRpb25hbCIsImMiLCJwIiwiUmVnRXhwIiwiTCIsImd0IiwiRCIsIkgiLCJFdCIsIlUiLCJMZSIsIlVlIiwibW9kZSIsIm5vcm1hbGl6ZSIsIloiLCIkdCIsIkoiLCJ2YWx1ZXMiLCJCIiwieHQiLCJYIiwiZmllbGQiLCJzdHJpY3QiLCJ2YWx1ZSIsIlciLCJBdCIsIksiLCJyZW1vdmUiLCJRIiwiX3QiLCJZIiwiZWUiLCJrdCIsIkciLCJydWxlcyIsInJlIiwiSXQiLCJ0ZSIsImVxdWFsIiwibm90RXF1YWwiLCJpbnRlZ2VyIiwicG9zaXRpdmUiLCJuZWdhdGl2ZSIsImFlIiwid3QiLCJzZSIsIkhlIiwiSmUiLCJ2IiwicHJvcGVydGllcyIsInByb3BzIiwidGVzdCIsImYiLCJFIiwiJCIsImxhYmVsIiwicWUiLCJWZSIsInplIiwib3B0cyIsImhhbHRPbkZpcnN0RXJyb3IiLCJtaW5Qcm9wcyIsIm1heFByb3BzIiwidWUiLCJqdCIsIm5lIiwiaWUiLCJUdCIsImxlIiwiWmUiLCJzdGFydHNXaXRoIiwia2V5IiwiY2UiLCJTdCIsIm9lIiwiWGUiLCJCZSIsIktlIiwiV2UiLCJZZSIsIlFlIiwidHJpbSIsInRyaW1MZWZ0IiwidHJpbVJpZ2h0IiwicGFkU3RhcnQiLCJwYWRDaGFyIiwicGFkRW5kIiwibG93ZXJjYXNlIiwidXBwZXJjYXNlIiwibG9jYWxlTG93ZXJjYXNlIiwibG9jYWxlVXBwZXJjYXNlIiwicGF0dGVybiIsInBhdHRlcm5GbGFncyIsIm51bWVyaWMiLCJhbHBoYSIsImFscGhhbnVtIiwiYWxwaGFkYXNoIiwiaGV4Iiwic2luZ2xlTGluZSIsImJhc2U2NCIsImZlIiwiUHQiLCJwZSIsImRlIiwiTnQiLCJ5ZSIsIkdlIiwidmUiLCJPdCIsImhlIiwiZXQiLCJwYXJzZUludCIsInZlcnNpb24iLCJiZSIsIlJ0IiwibWUiLCJ0dCIsIkVlIiwiRnQiLCJnZSIsIl9lIiwicXQiLCJBZSIsIm0iLCIkZSIsImIiLCJ4ZSIsInJ0Iiwic3QiLCJwYXJzZXIiLCJ1c2VUYWJzIiwicHJpbnRXaWR0aCIsInRyYWlsaW5nQ29tbWEiLCJ0YWJXaWR0aCIsInNpbmdsZVF1b3RlIiwic2VtaSIsImJyYWNrZXRTcGFjaW5nIiwibGFuZ3VhZ2UiLCJ0aGVtZSIsImZyb21Kc29uIiwia2V5d29yZCIsImJ1aWx0X2luIiwibGl0ZXJhbCIsInJlZ2V4cCIsInN5bWJvbCIsImNsYXNzIiwiYXR0ciIsInRpdGxlIiwicGFyYW1zIiwiY29tbWVudCIsImZvcm1hdCIsImhpZ2hsaWdodCIsIkllIiwienQiLCJrZSIsImQiLCJGdW5jdGlvbiIsInkiLCJhdCIsIm50IiwiYXNzaWduIiwidXQiLCJhbnkiLCJjdXN0b20iLCJtdWx0aSIsImciLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwiYWxpYXNlcyIsImNhY2hlIiwiTWFwIiwiYWRkTWVzc2FnZSIsImFsaWFzIiwiY3VzdG9tUnVsZXMiLCJhZGQiLCJwbHVnaW5zIiwiZm9yRWFjaCIsInBsdWdpbiIsImJpbmQiLCJkZWJ1ZyIsIl9mb3JtYXR0ZXIiLCJ2YWxpZGF0ZSIsImNvbXBpbGUiLCJ3cmFwUmVxdWlyZWRDaGVja1NvdXJjZUNvZGUiLCJjb25zaWRlck51bGxBc0FWYWx1ZSIsIm9wdGlvbmFsIiwibnVsbGFibGUiLCJkZWZhdWx0IiwiZGVmYXVsdEZuIiwiJCRhc3luYyIsImZuIiwidXRpbHMiLCJjbGVhciIsIiQkcm9vdCIsIiQkc3RyaWN0IiwiY29uc29sZSIsImxvZyIsImRhdGEiLCJtZXRhIiwiY2FsbCIsImN5Y2xlIiwiY3ljbGVTdGFjayIsInNldCIsInJ1bGVGdW5jdGlvbiIsInZOYW1lIiwicmVzb2x2ZVR5cGUiLCJwYXJzZVNob3J0SGFuZCIsInNwbGl0IiwibWFwIiwiZW5kc1dpdGgiLCJzbGljZSIsImluZGV4T2YiLCJzdWJzdHIiLCJOdW1iZXIiLCJpc05hTiIsIm1lc3NhZ2UiLCJ1c2VOZXdDdXN0b21DaGVja2VyRnVuY3Rpb24iLCJldmVyeSIsIiQkdHlwZSIsInNraXBJZkV4aXN0cyIsImVudHJpZXMiLCJqZSIsIkN0Iiwid2UiLCJUZSIsImNhdXNlIiwiU2UiLCJlcnJvciIsIndhcm5pbmciLCJQZSIsInZhbGlkYXRlU3luYyIsIk5lIiwicGFyc2UiLCJsdCIsImlzc3VlcyIsIkh0IiwiU3ltYm9sIiwiT2UiLCJfcGFyc2UiLCJvdXRwdXQiLCJSZSIsIkZlIiwicnIiLCJpdCIsInN0YXR1cyIsImVuZCIsInNlbmQiLCJ3aXRoVmFsaWRhdGlvbiIsIndpdGhWYWxpZGF0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next-validations/dist/esm/index.js\n");

/***/ })

};
;